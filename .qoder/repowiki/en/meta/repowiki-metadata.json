{"knowledge_relations":[{"id":1621,"source_id":"a1b4df9d-1afe-40b1-a45e-e2a52b4e9a8b","target_id":"2eeb7e0f-7a9c-4ae9-b3ad-fcb7b0bc3af4","source_type":"WIKI_ITEM","target_type":"WIKI_ITEM","relationship_type":"PARENT_CHILD","extra":"Wiki parent-child relationship: a1b4df9d-1afe-40b1-a45e-e2a52b4e9a8b -\u003e 2eeb7e0f-7a9c-4ae9-b3ad-fcb7b0bc3af4","gmt_create":"2025-09-19T11:30:25.512427+08:00","gmt_modified":"2025-09-19T11:30:25.512427+08:00"},{"id":1622,"source_id":"a1b4df9d-1afe-40b1-a45e-e2a52b4e9a8b","target_id":"e29a8973-59a0-4e9a-aa05-2c2e813dce45","source_type":"WIKI_ITEM","target_type":"WIKI_ITEM","relationship_type":"PARENT_CHILD","extra":"Wiki parent-child relationship: a1b4df9d-1afe-40b1-a45e-e2a52b4e9a8b -\u003e e29a8973-59a0-4e9a-aa05-2c2e813dce45","gmt_create":"2025-09-19T11:30:25.52152+08:00","gmt_modified":"2025-09-19T11:30:25.52152+08:00"},{"id":1623,"source_id":"a1b4df9d-1afe-40b1-a45e-e2a52b4e9a8b","target_id":"1cee3b20-df86-4d87-bad4-18212633f654","source_type":"WIKI_ITEM","target_type":"WIKI_ITEM","relationship_type":"PARENT_CHILD","extra":"Wiki parent-child relationship: a1b4df9d-1afe-40b1-a45e-e2a52b4e9a8b -\u003e 1cee3b20-df86-4d87-bad4-18212633f654","gmt_create":"2025-09-19T11:30:25.526669+08:00","gmt_modified":"2025-09-19T11:30:25.526669+08:00"},{"id":1624,"source_id":"38157285-c9d1-4aa6-b825-dc7da992839b","target_id":"1123a2a1-b26c-4071-88a4-931a6404b349","source_type":"WIKI_ITEM","target_type":"WIKI_ITEM","relationship_type":"PARENT_CHILD","extra":"Wiki parent-child relationship: 38157285-c9d1-4aa6-b825-dc7da992839b -\u003e 1123a2a1-b26c-4071-88a4-931a6404b349","gmt_create":"2025-09-19T11:30:25.531733+08:00","gmt_modified":"2025-09-19T11:30:25.531733+08:00"},{"id":1625,"source_id":"38157285-c9d1-4aa6-b825-dc7da992839b","target_id":"2162f5c8-8f2c-4dd9-b6ac-cd8be7d3ad16","source_type":"WIKI_ITEM","target_type":"WIKI_ITEM","relationship_type":"PARENT_CHILD","extra":"Wiki parent-child relationship: 38157285-c9d1-4aa6-b825-dc7da992839b -\u003e 2162f5c8-8f2c-4dd9-b6ac-cd8be7d3ad16","gmt_create":"2025-09-19T11:30:25.537759+08:00","gmt_modified":"2025-09-19T11:30:25.537759+08:00"},{"id":1626,"source_id":"38157285-c9d1-4aa6-b825-dc7da992839b","target_id":"b3a2f323-3da1-4a14-839d-f1148207d046","source_type":"WIKI_ITEM","target_type":"WIKI_ITEM","relationship_type":"PARENT_CHILD","extra":"Wiki parent-child relationship: 38157285-c9d1-4aa6-b825-dc7da992839b -\u003e b3a2f323-3da1-4a14-839d-f1148207d046","gmt_create":"2025-09-19T11:30:25.538082+08:00","gmt_modified":"2025-09-19T11:30:25.538082+08:00"},{"id":1627,"source_id":"fe5ed23c-7c77-4200-8f35-da7affefa6ff","target_id":"944ed82a-a2d0-4717-8464-7decac8bf591","source_type":"WIKI_ITEM","target_type":"WIKI_ITEM","relationship_type":"PARENT_CHILD","extra":"Wiki parent-child relationship: fe5ed23c-7c77-4200-8f35-da7affefa6ff -\u003e 944ed82a-a2d0-4717-8464-7decac8bf591","gmt_create":"2025-09-19T11:30:25.543205+08:00","gmt_modified":"2025-09-19T11:30:25.543205+08:00"},{"id":1628,"source_id":"fe5ed23c-7c77-4200-8f35-da7affefa6ff","target_id":"97410b77-1fea-46eb-8f54-50fcc255bc58","source_type":"WIKI_ITEM","target_type":"WIKI_ITEM","relationship_type":"PARENT_CHILD","extra":"Wiki parent-child relationship: fe5ed23c-7c77-4200-8f35-da7affefa6ff -\u003e 97410b77-1fea-46eb-8f54-50fcc255bc58","gmt_create":"2025-09-19T11:30:25.547889+08:00","gmt_modified":"2025-09-19T11:30:25.547889+08:00"},{"id":1629,"source_id":"fe5ed23c-7c77-4200-8f35-da7affefa6ff","target_id":"8305ccce-22a1-497a-8e67-8e95e9a999a0","source_type":"WIKI_ITEM","target_type":"WIKI_ITEM","relationship_type":"PARENT_CHILD","extra":"Wiki parent-child relationship: fe5ed23c-7c77-4200-8f35-da7affefa6ff -\u003e 8305ccce-22a1-497a-8e67-8e95e9a999a0","gmt_create":"2025-09-19T11:30:25.548295+08:00","gmt_modified":"2025-09-19T11:30:25.548295+08:00"},{"id":1630,"source_id":"f2de927b-279b-4d58-bc5f-28a24f192806","target_id":"a9e3c89d-baff-410d-9e7b-1487b99eb598","source_type":"WIKI_ITEM","target_type":"WIKI_ITEM","relationship_type":"PARENT_CHILD","extra":"Wiki parent-child relationship: f2de927b-279b-4d58-bc5f-28a24f192806 -\u003e a9e3c89d-baff-410d-9e7b-1487b99eb598","gmt_create":"2025-09-19T11:30:25.552558+08:00","gmt_modified":"2025-09-19T11:30:25.552558+08:00"},{"id":1631,"source_id":"f2de927b-279b-4d58-bc5f-28a24f192806","target_id":"4759264c-0e63-4c25-80fd-6acf4e103947","source_type":"WIKI_ITEM","target_type":"WIKI_ITEM","relationship_type":"PARENT_CHILD","extra":"Wiki parent-child relationship: f2de927b-279b-4d58-bc5f-28a24f192806 -\u003e 4759264c-0e63-4c25-80fd-6acf4e103947","gmt_create":"2025-09-19T11:30:25.557936+08:00","gmt_modified":"2025-09-19T11:30:25.557936+08:00"},{"id":1632,"source_id":"f2de927b-279b-4d58-bc5f-28a24f192806","target_id":"9208c8c9-f77f-41df-a1ec-9d189855da65","source_type":"WIKI_ITEM","target_type":"WIKI_ITEM","relationship_type":"PARENT_CHILD","extra":"Wiki parent-child relationship: f2de927b-279b-4d58-bc5f-28a24f192806 -\u003e 9208c8c9-f77f-41df-a1ec-9d189855da65","gmt_create":"2025-09-19T11:30:25.5631+08:00","gmt_modified":"2025-09-19T11:30:25.5631+08:00"},{"id":1633,"source_id":"f2de927b-279b-4d58-bc5f-28a24f192806","target_id":"b857e01d-2f4f-452b-9018-f8913875e164","source_type":"WIKI_ITEM","target_type":"WIKI_ITEM","relationship_type":"PARENT_CHILD","extra":"Wiki parent-child relationship: f2de927b-279b-4d58-bc5f-28a24f192806 -\u003e b857e01d-2f4f-452b-9018-f8913875e164","gmt_create":"2025-09-19T11:30:25.567671+08:00","gmt_modified":"2025-09-19T11:30:25.567671+08:00"},{"id":1634,"source_id":"e29a8973-59a0-4e9a-aa05-2c2e813dce45","target_id":"37013874-62cc-4c9d-a1ec-f29a7d0a86bd","source_type":"WIKI_ITEM","target_type":"WIKI_ITEM","relationship_type":"PARENT_CHILD","extra":"Wiki parent-child relationship: e29a8973-59a0-4e9a-aa05-2c2e813dce45 -\u003e 37013874-62cc-4c9d-a1ec-f29a7d0a86bd","gmt_create":"2025-09-19T11:30:25.568332+08:00","gmt_modified":"2025-09-19T11:30:25.568332+08:00"},{"id":1635,"source_id":"e29a8973-59a0-4e9a-aa05-2c2e813dce45","target_id":"50b0e08f-deb1-4244-8a32-4ef95e0d2eca","source_type":"WIKI_ITEM","target_type":"WIKI_ITEM","relationship_type":"PARENT_CHILD","extra":"Wiki parent-child relationship: e29a8973-59a0-4e9a-aa05-2c2e813dce45 -\u003e 50b0e08f-deb1-4244-8a32-4ef95e0d2eca","gmt_create":"2025-09-19T11:30:25.572561+08:00","gmt_modified":"2025-09-19T11:30:25.572561+08:00"},{"id":1636,"source_id":"e29a8973-59a0-4e9a-aa05-2c2e813dce45","target_id":"179ffdf2-84c4-4e3e-bc4a-907861867c08","source_type":"WIKI_ITEM","target_type":"WIKI_ITEM","relationship_type":"PARENT_CHILD","extra":"Wiki parent-child relationship: e29a8973-59a0-4e9a-aa05-2c2e813dce45 -\u003e 179ffdf2-84c4-4e3e-bc4a-907861867c08","gmt_create":"2025-09-19T11:30:25.572916+08:00","gmt_modified":"2025-09-19T11:30:25.572916+08:00"}],"wiki_catalogs":[{"id":"9ff9e5ec-5dca-4298-8e0d-873caa7446da","repo_id":"af949642-5250-4212-ad94-2c3aa27a5ee8","name":"Introduction","description":"introduction","prompt":"Create comprehensive content for this section focused on the j8s framework. Explain its purpose as a service orchestration framework for managing multiple services within a single Node.js process using worker threads. Describe the core value proposition: lifecycle management, restart policies, cron scheduling, health monitoring, and REST API integration. Highlight key benefits such as type safety with TypeScript, modular architecture, and seamless main-thread/worker-thread execution models. Provide an overview of the architectural vision, including the role of ServiceManager as the central orchestrator and the extensibility via BaseService and WorkerService. Include real-world use cases like background job processing, microservice-like isolation in monolithic processes, and automated task scheduling. Use terminology consistent with the codebase (e.g., services, workers, restart policies, health checks). Reference examples from README.md to illustrate high-level capabilities and link to getting started for immediate onboarding.","parent_id":"","order":0,"progress_status":"completed","dependent_files":"README.md,AGENTS.md","keywords":"","workspace_path":"","gmt_create":"2025-09-19T11:14:17.438711+08:00","gmt_modified":"2025-09-19T11:16:17.974199+08:00","raw_data":"WikiEncrypted:/ubibW/Mu2o4rgWDcef1HnVbjqFY8Dckjr7qHWP0N8x/vIOA8r1FsRjMzuNbmzOun6a084XCEUzDsjN38qEGRBrPEXoE1TO1r6r/OwGWH2Ei7Vh9dwQdYT2OQu1BMHLIK/llaaJ8CO1/pWdJiwz8uozyAwLyO5P2JRmXro1Ol/iZS4RYo3zwpL0+SnN4mjdsX27JbrYiFD8tSh81lfRwLx5V4sBDD1vbGYLS54gyhmkPple/bNaxczQgh3gdQmxpeK9iAx1/mJzBhUyp4B7CX31wzDh0FLYctcARyeDsgW7/7VEWUn9C3XLzMdjvQo6H/MUkdckh41tYicdZiMDtUUCeM4AJ/hh3TNSn5PCCHkLoQg/s5UX1xTRzWUDZzU5LG0RFGiTaFjhQnHRIFzSuhwkgN8PF8kDu0m1iWfGPAdJi59lzbEm8AZ077xCx4six2Gi+NHRdRShSvbm1K/IaOnGouPlR6Q7o/6Z/U6MK1zU7KeSKtMANOIZuSeQxF7UVivijGRR762x1I/j2Dvxu6tbs6kM30FcFudrlNOKp6TkLD45RY5ID4TIlb9qEYVLyOs56jT1mnsa9b0sGPHK1TwJnERDA+WaX0Bw+oWfi3kMmWtGEg0McbEwfE2YXH+UkqO0pGou/Efg/ZrROpkqpYCpyhPHlsqbkpA5jX1M4Tq/DzcKfOb0khQ80fZdqsIDd/e5Sn7M5fwQlddnnSHBCjw4PBDlGc+SOOxPjBnBPKmzgo9UCLEA46BXLLKFWKDxRIV3g+0Mr4g/8Fq1w1FYhGLjRZMlRbxd1kD2GTpimgFbREwEuU+VOBPgdcOPOXZMJ+BC2ihuDjE3zuP3dbenq/LDvyl76gA2q9T5K8wACYEpnwWGvoWnwySijG/mo1C9uCwGAJjpZGjnuq6TdGLXJDFBhHLa3f+pGKh2LWkI6xDtsx/LE62Bkl2gQZQmWpZTxRSu4qJSPi2xxGDHJFmS16m/0sJyJZT1Jbp/yatbUDjvhnPdkY5tAcEgIMWtKLpzGUnmhnrwpijBHXwVy/DoH8BB/GhUQrVj3XbX3RNmBqZSVyMP4E27fvXCtzGoT3FjemsLNe5Qj+rnBsqSX23r7wDb0SWUwXQvhOx0WpR/gMuZYp/OA/AqNeK6uauCLLQZ77QAun0RMYElG03a6LjmsNhHWQvWDMK5g52tEVJ70wDRrfacP0Z69t0mQdph62ojyz/7H4G7fada9ZlEZHP5w3Ts9T+ZzKnJR9x7gD9akNSYqa5EwQoL5zlpR3LucBD8fjEUVO+e0EH4BEGhqOVgUdG8IcfF9BHOta1mEAYVjuNohzXDGVkWIbeEgn5jNrB9Y9NiWUCvJgLPr5D8a1tWTufvEGJWppQmbBwaSEAO2JKkmnnYvmpBRZMNyi2ses/pohjD2qb+UvEnLNrqREOa6VTSbPDyTvnB4cDgChmTB3wmrHOeL3BDrtCIhOooWPM8T6TsyZTeTH+h7BjOviUGRDgNpD2m6rqGBB9iBsfOXXuOUQhCg9eIFcqJaA/DsyfTdB3yPTsjybhkbQ1yz7o2sgbxIaUrPp/FnMZTMPblXZkgOUL75yR5QILbxIz44VjSBAsgtBlwxa9jO0xr+LWyyD0YfpdsmTYb52BSqsFPMJ8Q+z6jft+QQwfggHBojMi0nqcX8xbtyoVzj/JZQWBAXyxkMgXGNax1JYPDLYfXCga4=","layer_level":0},{"id":"9eb02715-f9ad-4fb8-a684-4997cccbdbd0","repo_id":"af949642-5250-4212-ad94-2c3aa27a5ee8","name":"BaseService Implementation","description":"base-service-implementation","prompt":"Develop detailed content for BaseService implementation in j8s. Explain that BaseService is an abstract class designed to be extended by custom services running in the main thread. Document the required methods: start() and stop(), which must be implemented by subclasses to define service lifecycle behavior. Describe optional lifecycle hooks: onStart() and onStop(), which allow for pre- and post-start/stop logic. Detail how ServiceManager interacts with BaseService instances to manage their lifecycle and health checks. Include examples of extending BaseService, showing proper override patterns and error handling. Address common issues such as unhandled rejections in asynchronous operations and provide guidance on ensuring graceful shutdowns. Highlight configuration options like name, autoStart, and healthCheckInterval. Emphasize type safety through TypeScript interfaces and the use of ServiceStatus enum for state tracking.","parent_id":"e5a37c25-eba7-4adb-899b-d4a2d39d1f70","order":0,"progress_status":"completed","dependent_files":"src/BaseService.ts","keywords":"","workspace_path":"","gmt_create":"2025-09-19T11:14:39.59526+08:00","gmt_modified":"2025-09-19T11:21:23.936832+08:00","raw_data":"WikiEncrypted:5LF7XW9XcPQyjyrZizRHIOeLhvu9NF/hnKSqaAkjPeUE5H1R9dwkQ1wwfBr+VS/MoOY6kW6zilFvTSbB1ZzPlpYRnPLj+6SKUYE5LP98ltYuekduxzzXoY9A08hE2KKTOdN6TKPe4RgoiciK32hRBpSjNw3XZqJz4Z6jYj1NlO4y2zPUU+ItfZydX3CxUHS+36LitzckZrHSdp+fGz3xJpLpdlQvsYrVP26/siljIL5CjM0DfsLdtjUKX72fphOi7OtuG7pZtLkygcfPCmEAQaz6quWc/ZSu3JBdSvl+otGeGzOilNETLURDXTsNoXFWUt861OcppVsJErjXCcru6YaSIvYLDT+Wq661JGlp+EUnR3qRzfpm5oNT5HP5SgBgFJmuLni+MADykuAf+RQ/o+aIYPqB5hO8rhlqxfPMTaZGVmoJVRKttPDHPqNHl4jGedfmskr2FHMpf8UPiMxtxDSJ+CCNAuMLObcZOjVBj8qwc7NN505Ub5K9RrS3hi62ChZshZrcG0HjqUx7FZznjIKalp/UdYd9pr7BgV3OY36vFndNVjaJ0YVnsXazl095ENpXeTbkvBQhD2vaDH6j7djCBfCp4akJfd74om0TWT+dl4hjz4N3bxI6iSNz+0dAZI4F0FvpJ8OuSIXWIeH5qk/OXu2GGbExs8tXlu43urFHd/FCBE6OvzRxDlPGgovcIOx2yrOSH7Ia05lUiTGZN4qK9cDbZzJyemVXONALYIdxUadTP69OYQvIYBWbeKNAxc3GrRLtdDMhSZYZVAjSY3VPV+sxQaqw3I2igxwwYmfZydBHVlwwLdoSe5tShsB0G/uL4dpONEAEJB+snl9D3E3e6G76/tti5A9xWR5O328qxiGSHsVljOr14eeFc+ubjKOIJaS6tLhwHj1jwEFJp8n5AdWJIXYi2ZT+q87II81UtaxWu4Jd6w6i32JVw8EBVh/bh+ogqQCLZOF6hy3muSmLLkoI2qVtzW/RMWa3408lpZ6gQoVXqvg8R4BWpKDfZDnRQwHiOQkG60CxtTyzOmqHndGImDqOWMBLVT60pQ6DZE+tJG/0PE7GzweNgN/SL34juWBUkWE0d7YIQf4ei99kRiQjaFOHznr7NWVxT+rAW2pZVrUkL4hj7Aw+xB0OGMzd3n2iK7CNudg8yDqzuU10JP12cAJn+/AozY/d7S3UwYAP/qw4eEZ5XuveRbiYMlZliNSiMiZGvoR+IdYSSydJlgAb4q8rde/Udv/B7Me9jo7Pdp4t9qqqrkR7kE4tqbEGxDvcXoju3dG9mXuN6ngf1K/ds4Gqiw3J2HA5bshNjCP+4OMErc+z8L2NszovDsvDmX4YIyDeK9BX82ajmyuyd2+j2aC3pq5u5zql30kVf7g8/ipDBVS2NR79IeuMosQzkYRN1rjP0tDtUGmz1EIxU5xtVDgHH6/2AB7W7wgykA8lfiUXqppxUhINV4SKThKVy9EZUvYVbI79RiowvJEfcmgoQEEIRCMnWS8yr9xGBsq6pB9DDoiCNqc/EEWwSiWdMrrUKP/zm691iR/XJt96BkeKm/OmcZ8vXhqgj6xyI9YiO8ihXkhM6aupfhXSRumC8OzrVZuC1l5xP2IkQw==","layer_level":1},{"id":"5e5342f6-04a8-4925-a7a1-b6508240e4f3","repo_id":"af949642-5250-4212-ad94-2c3aa27a5ee8","name":"Lifecycle Management","description":"lifecycle-management","prompt":"Create comprehensive content for this section focused on the service lifecycle management in the j8s framework. Explain the five lifecycle states—stopped, running, stopping, crashed, and unhealthy—and how transitions between them are managed by the ServiceManager. Detail how the start(), stop(), and restart() methods trigger state changes, and how failures during startup or execution lead to 'crashed' status. Describe how the ServiceManager handles lifecycle events, including automatic restarts based on policy, cleanup of timers, and coordination of asynchronous operations. Use state transition diagrams to illustrate valid state flows. Include practical examples from ServiceManager.ts showing how promises are tracked during service execution and how errors are caught and handled. Address common issues such as services failing to start, improper shutdown handling, and race conditions during restarts. Provide best practices for implementing robust start/stop logic in custom services.","parent_id":"c2dcfe3e-6ae9-4e3c-b709-8d6995c66d40","order":0,"progress_status":"completed","dependent_files":"src/ServiceManager.ts,src/interface.ts","keywords":"","workspace_path":"","gmt_create":"2025-09-19T11:14:39.729867+08:00","gmt_modified":"2025-09-19T11:22:18.319011+08:00","raw_data":"WikiEncrypted:xbmA/Un8S89yBKRMe6iygmPunGjAmZt5nR6C20hh8kC4LUN20mtpSf3UpGi1o052mIiRKlc6KeR7GnzWHRjYnF3lhLp/Mzv6eQ2lm8lXYMQvPUE4M19rlvXvcjvqIqolPNqcYtJy80nbOVuzLKQVaC3Opvxvdvuvjj82LL8SoeTip0imvp0ellH+jilypuAKHlc6DDeVo70OkXgQTl+2BG4Zg9SBKvMJRU6hMpfIFBOpaokv5ITdeg4E/p/GynJ9XhNJEshaZ7ep67rYdwuBV3YVZPX9coNB9sw8nWTQXXyYk6wu+kd/9hJbrEyYoyCnqIpIxQg9C31WcFHUjkWocD36729IrpgvyvXhfw/gjRERzbywRKygHwgAcpIW9BbX03GxQCJL1ZIVJ4i2a0gpVdzaI/aTS67IywskGlmi85oeCzcP5BLLqKuYG1c133Cuv/jRQU5nILSk5aTGnS70Anbv2fIO5hIqtiXqJqWMY1Atdr7LXQF/tina7Uqad4PE4n1xguvcLM3j6Au2YM1YB3d+nVKL8dhZJENhbPp/9cEPGJM1EMQ20OhjFs1lANjQRsA//rI6sKoB8IgP7oUW4uBaGQ64O39f0UX2AhUUImpF7G/nlGNx6d5Z3+U5wsl43LzLarGiICspq5hQ3niY6x7N1GrK/heK11ImOVaWjEcVNefBUquKQqbEeS8ynf26LkB8Fi0svS5/e1ZL7DNlIUyBJd8YV8YWrerKjHJo/6fu1JcZduzMjB4whPE/l+ZNq8noExAuifbWl+lNCmJs7sTUU2VSe4NKStphdvJTdHhsr+ouy6ngdktkARBdghxyFXv6IAQhHfUU5IxJNAmeoSuOB9t0Gd+6Tt5xHv6nCOOUkV0+0Bcd5JHPsjUWkRXa2yUANN8lzJSg+/75Z5YeEc1VMuMhaq0Zo0K/GJX9kt2c8ohIiP4gpbGG0I/+JoayLmVHPkWMpOm1IOH6GJtTTj7ejcCGBewgaFsESNvlbAzF0baP2IMgbNqq/apwNeudg+fs29ugmplIjc46dgmTsgL+Co3CVWOlY9RwL+1i+LCClINe3fAvcxYw7HoIVowKhj2G40m7xIIJ4562jhGlNv+NQUVIqiH2/mYbRgP9/Br6Xhe70my7/4oDYMfVnMRA2rL4puWnko07BVIQ4t2pg3kGnu6p2UPy4jekGnpevEQSJghzp0M2hRUY8EJF9ahm2M01YOtg/BU9ibMpBJkTCLPzV5x4NNIOOpVyNjaEN20peWv1nJ9UP+Wx8GayVy8LNY52WHxuSw/hbFOrYjtCk3HlNrFBb2QNSq6jLQzezeJ0jnFtYlATdJCshMxsEDfSSfSEL+ICskF88xcc4dvagBLoUi3gg9D05twXX448tWgO3xSsx+ly2Nz9ySMNwMNDfiD1VISuCOn9ggAETWzxJywQLhEvhf1eSe4Ty0gQgeDp2uKOuqs8H7usYAPDqcxBFEKoJKyfNBViw35H80aKtr6vQqLYRTRaz3J1OvrsHgc5QsdHvgc4sqEdc9LRPR0dJVhkDwJV+M+DL+B0kEQXodTbFn6L2wVD7nwcYfEIwc0RcZnFGrPdArerUQkf2UsveQCiAz2S6Po/IMiG85Ao0F0C8voSw3d6MU1ViYLotjvO+YVUagttlVCdnFKyxD75OeBaLfvGAbu0wEv4eoQo60Kcu9AjS0i3C0/WPkd0WZUalwPAoJe9tbbwjAd1rQgj","layer_level":1},{"id":"ed6e7ad2-7927-4268-ae85-2a23a0cc17ef","repo_id":"af949642-5250-4212-ad94-2c3aa27a5ee8","name":"Restart Policies","description":"restart-policies","prompt":"Develop detailed content for the restart policies feature in j8s. Explain each policy type—'always', 'unless-stopped', 'on-failure', and 'no'—with configuration examples from the codebase. Detail how the ServiceManager handles service failures and triggers restarts based on the selected policy. Cover the implementation of exponential backoff and max retries in the 'on-failure' policy, including how restartCount is tracked and reset. Use examples from worker-restart-policy.ts to illustrate worker-specific restart behavior. Document internal mechanisms such as restartTimer and status transitions during failure and recovery. Address common issues like infinite restart loops under 'always' policy and provide mitigation strategies such as max retry limits and circuit breaker patterns. Include performance considerations for high-frequency restarts and resource-constrained environments.","parent_id":"a8ecf157-826c-4ab0-92f9-9b27421b7df0","order":0,"progress_status":"completed","dependent_files":"src/ServiceManager.ts,src/interface.ts,examples/restart-policy.ts,examples/worker-restart-policy.ts,examples/restart.ts","keywords":"","workspace_path":"","gmt_create":"2025-09-19T11:15:00.594614+08:00","gmt_modified":"2025-09-19T11:23:04.379684+08:00","raw_data":"WikiEncrypted:NQGJtpC/V8ifAHTLG6ZUTGLX4yQGnp78RzJ4/AQo7x0Z1RRzj+yQS08xLAjdZy0IdM5peIVXgxOkGXu2m6rzKUxq8boKlXPEiC8YAG9D6qnbcBV41tFziATcpneqabcQoKatAaLplCmnwleKFZS7aaUfSaYIhfo1CUQ1Xvey6EB8J8QjUIGxSstR+Aw4aYoOo4xBvxj5usf8C+jJiRFMw5cSIQtZWK0SuVIGJykbxcCK3qra2snEpdXdW/VIx83DC+a6oQKN9i4BGPhozrMRf2nHaTCCkHplfzTwie55PLRHucVlgbk5LFW7GUSevzn6ttT1zsLGZHEvS/POlwtzzOXchncZ8OctKB5dOJdLHm33slvwP6QE1lSyGWHwFcon+dad2dBesZdXD3622i5vFmVR8/X/OGQd3qbtSAsBjhJEezY38jM6u9WGFlUCj8ra/k3/5rdPeAQf1msBBXLN+Hhcp4AWR3XyaD1XilsoI+dJQNUvL7a+52z17SdtTuScqbKWXXHoD3CvP3m+QW/RCw9E6ijlRGcDiBLSJm/z1qrWrDEb5WwpbKoXP5s1NGE5wEAf1M92zecI0ER96DMkXIFZM2pTdThLZnW/8OogGl7dqB15k5a+PsRqh8Pffhdkrt5jhWIKVHGYFHEoBcDs8NZvHMGIvYjZVVZeoJZRh+lozflmptCBRGbXinqva7TZVgXUQPJUog0F7Y2a7jJY005GQtE/2qrsyMd7ipFFdlcd249OOyjEaz71sSsYL/LLVmO4urzux/r8yr82XpE1DwIq+Z7gOeYEsAkUvqn51kK7ZEPyMh3mXGsSNxgAmW/+eZ7YCCLRysDGTLSbEihsSFnYB/EvDVaM3PfwaF7Kfb5/usu2n6AbUWYUyFXk67tqzVdJ3HCjlUlGlVJi74jKjve+NPx5sKVbDBGmhZt/UihWGrVpOWoaa9+Xs7aRd5Yr9K9BEJTf9xIBMD0m5I1JMBMA+IKRCPLuz6AhcreMZYkKp4EjNuz16qjaXOKGjQ+EkyzMIXuOwOnFX4bKtLtxxWu89sEQk/j3FsPOhGypn3JrcsbHZtYZy50SpKbWmqbfVdIY/ABngRebrNoL1r0cam02MtCiNHyL1i0FcrpNJgiyqdfbqKSSA7nwnCx3JnshsFzxwUHwP9y6NuLVBerAa5JHfseMmKU4fmh983OmrhN32r/3aI8F2xyWBiMZE3kwnyBJHnkWCKn8alD0X5qgCRrxFwxUuLx+GAEHtoQBErtDh7aHsI+1vPF3U/fFUKsd1Auj4hwNAby0anWzTtZyNVUOD3HtkB5zGToPoY5GpIjNwPQEOT65q3H56sjAv1J+9bzey1lqyzfwNvS7pY+4/IVape1lFyRw7zDyeG/wrOdxCZoPmL7SSrglsqunibYsHCAptx5YCunaTvNmJ9Z+EN8ohlONq4dvRzyFU5fPtBW/ntLsGj/QsgIqblE1MCQGxdEH+q57dLkEWkfuGgGv6b2UxhCdc94Xrb3pHHoJDlBxM8JGV2V4y0yoI9Nz44h0fxyQ5C1O8yaV+r7isbEQFq3r8sjokrxRFsRGU+TVOfiqBYl+ZfxpqTnFAh4jjbhOZocojjIaCOushheGdDdD6N3c4LXKt4I8dwntDa+saaRL4AvJEJU8mIIDp8pRzAe82N5LLedpQl+01hypgV1H5Q==","layer_level":1},{"id":"23796b6e-de24-4d29-a9e8-1c552ca0852e","repo_id":"af949642-5250-4212-ad94-2c3aa27a5ee8","name":"Basic Services","description":"examples-basic-services","prompt":"Create comprehensive content for the basic service example demonstrated in demo.ts. Explain how to create a service by extending BaseService, implement start/stop lifecycle methods, and register it with ServiceManager. Detail the configuration of restart policies and cron-based scheduling. Walk through the implementation of a main-thread service with periodic logging, including initialization delays and cleanup procedures. Highlight the use of healthCheck method to expose runtime metrics like memory usage and uptime. Provide a line-by-line explanation of the SimpleService and CronService classes, showing how they integrate into the orchestration framework. Include practical guidance on setting up graceful shutdown via SIGINT/SIGTERM handling. Demonstrate how multiple services of different types can be managed collectively, and explain the execution flow when starting all services. Address common issues such as unhandled rejections and timeout considerations in long-running operations.","parent_id":"f5b3ccb0-e72b-4655-9334-b4e7cea6bf33","order":0,"progress_status":"completed","dependent_files":"examples/demo.ts","keywords":"","workspace_path":"","gmt_create":"2025-09-19T11:15:05.837039+08:00","gmt_modified":"2025-09-19T11:23:40.965599+08:00","raw_data":"WikiEncrypted:VDiDZJYWRQTud/QhSweUbR3ej27EaI+YihOEt/AX2tW8DP4q+AxpOotKVAI3VYBcJ7BWrT49Rm4+gxad6qiXdDDdC2Ilf8uaTLIrNLjeT2LdTnHhwRxLctU/q1BCui2klxdpN0MRzkRObH9PsqCVu/sOYOIeEFIPtJse4kEqW/ENfM4CIfdcPstnjiLW5Ld0KJQexWnB8QRslmKoTRq7L0KT+pPj4O8LbZzI+Tvev3gEOQYqnC9IpzigueTthu2taKHLedFO2+7nyvc2IqCu7rezta3RUS1NmYfh/I0VT1nvNILtixKxRKT/Wh2w0OVwd9soDGmREZrPKco1YYDlEiEsqllkRx7yOiUyfkopF6c4R7WitGyaHckcbaq7nYTLACE6jjGfsg2Ry2viFmaIMc/0Mig3XzaBhu+oe4KHe4ZFBb3TjsNuwpqsGmJ656H9fX/0ww6G7RoZYwNHGUSxjkvsHCzkTVFgWJiDrBWng7C7M81Z2olk9HrYkNTAsaCzRGf+Q+hpB0xjgB/1vnehbGntOAoaaR/wlN4FbqiHnk642mKseNkFMZ9JMeiXzr9xW0FMo5lPac0Ma5hSFySebJUKxVnUFoyEB+YEJDHscp6WPsacyKprmsVnR64LSKAHCXti2Zog4QBiOh5F36J3ofIcMKMhnmTPsjVzlIIafuWlOdOrvPFi5za+3ad4+cMyFknQiyPBqKKB4oC64w5HpjlXnSMGpAHqm0HfTQTq5RBpRw2EKTuKq4z+xjnUiVByTmPoLTz95skTcXdfY6bvMKB2/ovLMtFZu0rIjUkaHap45Xvmz8RIa+LcabN8LAjhAuVUC5Z8nJYj+HTMFyDfJ1HCJgdmNPYGfKdtPJGo/dmnBNmpIzWKCh9iR08ITmJiVQG6ObnlLSdfEXbODRvtBxKHTEf6woD/7kbheXmTXc5JyiBPH5+zgzliJBAk7OWKTwbyCUd5uxy1vG7OaGGTf2p8JmZkWmPGhRr/LYyHoN5XoZ3naja4nnWB3gKMBBHTDbShk9JT1lvVKjnu2OByvtduNxAKyZJWpcORosD9qd3Bh7srfNtWho7woSk1APPIGsLk/Zuv9+03MBEmPfHdGtYGqR45LnVNJOo2+IEvaYdT3oh9nPp2WMSmmza9Vq+WICSX6rPLh0i5k2t+CnNS41IKHZNbzoN62SEg7wmbBHer7Cp+b4U9BDIB/r7dFxlnHAj/3BgnYw/5nwEN1NEVfC6CJwuyE3KxlgOW+gpp7o18M/8wAEKu3CWq6hNd6igVVP7beoMd1cbwJxCtkyiPrChnVR/zviTOwvNeA1R3FyALtaK0wlvZIVxc5RhOdNVHEwCGfEkLYilBmgh03LkZFEEv2GLBPP4rRy3twXMr56tXV6wf+gB9za8kLqpxAsfpxsuJu6CwcNSKchmtJbDagohuF4i6sHTUUt0decRo4Wv5QXUXTvkKuQZKOO8j1eFoU+/ha2VsfyBiZ78c8KJ6rmVsuMlGgzquPQhn5A/kF/K34TtLvHfAoXoKF7l+orDT6NBKhsOFUqNSccBSGlNaNcPl8W0E2bIlIQz7nNFhNHV+pUbKW2w1Z7M9mYBvqDYD6AsGtP6tS1NKSmS3kx2CYnFk87RK8pQDARmfnmQsEoWB1BS0kjebAI9yLQRFw/WsmdkcTNku3AgjofyDBliKGQ==","layer_level":1},{"id":"ce12bc15-f748-43b7-b897-55e61d07cc32","repo_id":"af949642-5250-4212-ad94-2c3aa27a5ee8","name":"Main Thread Execution with BaseService","description":"main-thread-execution","prompt":"Develop detailed content for this sub-feature explaining how BaseService enables services to run within the main event loop of the Node.js process. Describe the implementation of the abstract BaseService class, including its lifecycle methods (start, stop) and default healthCheck implementation. Explain how services extending BaseService share memory and the event loop, making them ideal for lightweight operations and tightly integrated logic that doesn't block the main thread. Include code examples from src/BaseService.ts to illustrate the class structure and method signatures. Address use cases where main-thread execution is preferred, such as services with low computational overhead or those requiring direct access to main-thread resources. Discuss limitations, including the risk of blocking the event loop with CPU-intensive tasks, and contrast this model with worker-thread execution. Provide guidance on implementing custom services by extending BaseService and integrating them with ServiceManager.","parent_id":"7431b25e-5228-4645-8dd0-ac3a9b31d85c","order":0,"progress_status":"completed","dependent_files":"src/BaseService.ts","keywords":"","workspace_path":"","gmt_create":"2025-09-19T11:15:22.273046+08:00","gmt_modified":"2025-09-19T11:29:27.303052+08:00","raw_data":"WikiEncrypted:O+ttHwCbMH0Sc9Mj+5rYyEjjlS3jF2XewG2vfNZq9cAjckZxaXTEtye/mZbllEy6kezpISvajC/j9p5mHFoNYBKon4jJBCKF6Iuu73sVCKZYvwTxHb9IuPDoFZibH0Sqrqt1mIH91LOpXSwNEtc9QJmnFBNDwmBuaoBY3NVimDvtNueo6cMXgX+c5IBWKeIMhtnIiwxGBOoWK/n2LrIyb1TxWib7Cq7zJldgAZ8YCCKHpFdZsUCa6rOBQGwteIjya958V1fB5F5j4J9KlcsSWcMHYwgiUaoeY9UlKbBO2TEqBw0VXt1GNfh8zfcefetdfVd/vQW3Y55x13nfkaeF3s/dF5fzQRl/sXnnIvvKQ+Q4eBNG+MdXdl3yQ7D76Op+WHAI+sEJBYInJmpeVvnF2COJuRxrtJ13NWhlrKNpGuJOQrE7WUW/YFv3ApJPyq0oRFqsEL8zEZgOArwweVyhxVwF6h2ZuM3qmsOls39vZjHGCSzqY+sN/Gj9mOhjTiD5nymyCUMVTKaycffBH/QOxX/dG66dLFgNBWKYFec7y6cXKygIGZYVJlBfHb6k4yxPyibquslka4ssJW0hme9SpHdgkETsIg4cCGRMd9HsUjZz7FDbDklkc+WCzKt7ShsD2vX/pnzBgOVfQs4udDMxJm1ThUgsgZziq0+sdhefQuXUlP5M9GrjBYemJ5AobYoKzvu8tjdf7LF5J9YEiIWzNZaZbWDljpuk0En9gBVIikR5Y0/O8I3+Yx+uDyoS9vOnDHwlG6jjJjG1KV0WjiwgO0b3Lu/GXQb29SUE4ZzyOxmtDJ4fvgD+z9e5GxKn3nviMGP9tyPSBKwTgqZwkv5gE+5e3rUgTGSu+DgVXhQz4Zz1+eXrrp7lmMac9CwklVpkVEEfzOeNVwXu5t5CZmazMuef4Q8p5HEpzNsheLFp6w12U0j+G80c+lIyY600h3QDcMvbx9aqwCz2gyKEUsS+QErXV3BaES7/649hZQ3J7RsWMluw93p6IDRPa9SBcKWxLL1g19clwYljcRePpj+CeruuGvn3Du5YHxFVh3l38TWznQM/b504ECxQMKXqpTsuUAAl/i0Ye2T9+X9UpFLSVIrwjGQUaFyhplDL24+NesUwY0LIULSTdt7ZzEcJnvzUK2MWyhv6g6IVf4fA78Y8h5XumT1gcxLdyRMj21H212MKIaVJB+MGYKs7OtLCntF2L7WYBe75PvDJ5kQSVrGwkFiAXVMq3WaGDoIXuDLa8GzySfy4e14p0f0Vuf3maVI9dnlZj79ReBKxg35CiEwYvKco2niUWhvEMcc5Zex3NfPbxONClXyonWkdt1SO2l0h5A8G4V6KEhNPp4QXH/h56forClkt71wVmJzZTGQUhDRGvrKXEamNl0i/bAmgrLbOK8Or0+hB7jXeYdO18EkrzDGFRbvKNLeLL8Wor5fVCL7Cbv5xzozpJv2Ae6+hkOVEIZV0RyQbF7plxmdS77SQnfLNB3Tr0tCpqI2T6qRcRTAvQzxL3WjvDrE86P1gdi4kIz40UuM42FAOJh7VwELUuSJxzyrwJdfjUhbIJp72HooLaB5cLyOkGd7JipGuJtdnk96RNWuBOFNPSxS9vMPGcc1R8SxhnUJuic62plkHqKOxiHJKOr6Dd6J+PLhKngaRzyJV2YaxFCT+It0S1estxHATdJFu4vfsqkikB54FsQ7oPTytJzSN+9esPPKJugyQ","layer_level":2},{"id":"cc6a8ff3-52ae-4aff-8dcf-da0120e2b071","repo_id":"af949642-5250-4212-ad94-2c3aa27a5ee8","name":"Getting Started","description":"getting-started","prompt":"Create comprehensive content for this section focused on setting up and running the j8s framework. Provide step-by-step installation instructions using npm or JSR. Guide users through creating their first service manager instance using createServiceManager from index.ts. Walk through implementing a basic service by extending BaseService or using createWorkerService. Include a complete working example based on examples/demo.ts that starts a simple service and demonstrates lifecycle control. Explain how to install dependencies, import modules, and initialize the service orchestration environment. Cover minimal configuration options and how to start/stop services programmatically. Include troubleshooting tips for common setup issues like missing dependencies or TypeScript configuration errors. Make the guide beginner-friendly while ensuring it reflects actual API usage from the source code.","parent_id":"","order":1,"progress_status":"completed","dependent_files":"index.ts,examples/demo.ts,package.json","keywords":"","workspace_path":"","gmt_create":"2025-09-19T11:14:17.441023+08:00","gmt_modified":"2025-09-19T11:16:16.650559+08:00","raw_data":"WikiEncrypted:qfgbutC7oyxR6nMxrwk1ODnNMBEQ3/sG78fQT1yXWjspqw7wFsgcSykO0UmGZY8QTKN7XNoRj5gLcQItLpCOKSfGtdhx3XxMAjXIXSn/DR51tii/zZKkOW+PvieesRUEP1jziZ1H1aMQLf5cDDCyK6Tjd3+TRDh1CIgowH2gNG/r76H1urfMaUzDAiLNH5YJBpfw0cz9dRJwxF8R0R9GURkoyHcxk9C8pLWsVzJi1MUQ6YDoPNyfaE7w6bXU9fefM9ehu01fiYODWwHMaEIfNLiy4I2V9kCCwSZRKTkfApSi6CIw69+Atvb8POKlstGErhilnHgpKWNjaDV1LHaopQMzdkeR6PsRrD9WtzXtXdcC4Q4m26MDq7kH809cvDgfWQXgJwmyqgA58CpxOHd2aDnHHDWw7IJqz99nphJO+87o8DaMazez4WekJLHTMqi/U9MSZS0HcoFqYy85MqP7rmhheTfp2sXLfZzAHZzK5jLUmXnLA1W5PnzkrAUakA7HCy4uMJ5Q2iisy1ehm4DI4M5Nfn2YPbxm/3s3UH2R4xssQSgGrueyHwa9prhWyB/NK+mGOHbCROvFB/9PbHpjpZiW1qml3f5+PJbhqIjFTa1TIfg5bxcuYH1SP73mGqa+T17B2BYXzUI+ynQddoxIMybh9v5JtIBU9nmGdb1yhXCLYwtC07HxOe+oenZc69bjEJva9GztB6qnvMusowZ+qrgcMd2dP6idboO+PO7YCFVQO/hpFp7vmLXtis51GJelH6GpCnu3BBU8xtUPTkR87LCwLw4g0pUmvPRYuNBc3whEztupn3GMkF7Q47PauaudPrAX8A6ajWk5EoURc9KMmI3btgAWNppbWybN8RGPXRJX79cuuFSILUzm2Ng7m45DAkz23iho5BjqZxPfOc3pv8kZb4n110TWqQFn6i1bbeaYbHNW8UHGewbTHKoA51/hU44hsJy7YEYeoFNs1fkMDU7jusDvR59b8kJDPGBBgwkR5LQVZQTZPj72ZUUzZ8AA+7pamEidowVfZ+LYDfu3Ekwlp1HGNhjOp8fAZwDZCR36ADJWnNiS44tPUXaEge33/KGBdOZ+CNC5j9wfipfLPoSP0ScnmTrrwixrTKy13IGig1EvYuKhOYQPMKtNcSSWY0jByu9/Y7pIHHkZvDC/nh3e+yReMyit6vAqHM4ThYcDVfLFCKQ6Q6WBXguuXBa/TV7oQy3jqbDHf6Mz0jBnrE2ihKI57No5F0OkJqd1ucF8jACvHVt52+KkfbsRqi/ncYwVormfmhT4eHxLmrsPjxThpwBW9OLRGANqHNusxpFFLT1RwWzmhczax2O6f7ov5sdbP7ZanYtYTQ0e1HDTZ1/ma5qfPBBbnP28Su0Sl3cJqDgmR1CFK9aQVkXgwW6GeVJ6Ryzszzx1C5S6pvZp/vh9vhldnQ/foGswjZk5qk7wtq/yECCH1PWixX8BYUGlg7UoGcUFYEbnHC7VQMVmb5oUC7jZrQEinAdB6u16MF1HDARo9kzZxyLnHK4K4mqoQN8b9spuk+FH1GZ0xiQ1GpJp2DmU4bGCx4Wvywettog02r+yra5PDHqttsXBh1ox","layer_level":0},{"id":"a0310181-06fe-4b58-894b-eb39d6ae368e","repo_id":"af949642-5250-4212-ad94-2c3aa27a5ee8","name":"WorkerService Implementation","description":"worker-service-implementation","prompt":"Develop detailed content for WorkerService implementation in j8s. Explain that WorkerService extends BaseService to run services in Node.js worker threads, enabling isolation and parallel execution. Document the internal architecture: how it initializes a NodeWorker, establishes RPC communication via RPCChannel, and manages lifecycle through start()/stop() methods. Detail the role of workerOptions and workerData in configuring worker behavior and passing initial data. Explain autoTerminate functionality and timeout protection during termination. Describe how healthCheck() delegates to the worker via RPC while maintaining local status tracking. Use simpleWorker.ts and worker-with-data.ts to illustrate real-world usage, including worker script structure and data serialization. Address common pitfalls: worker initialization failures, message errors, and unhandled exceptions. Provide solutions such as proper error handling, cleanup procedures, and debugging strategies. Highlight integration with ServiceManager and status synchronization between threads.","parent_id":"e5a37c25-eba7-4adb-899b-d4a2d39d1f70","order":1,"progress_status":"completed","dependent_files":"src/WorkerService.ts,examples/services/simpleWorker.ts,examples/services/worker-with-data.ts","keywords":"","workspace_path":"","gmt_create":"2025-09-19T11:14:39.600237+08:00","gmt_modified":"2025-09-19T11:24:32.76507+08:00","raw_data":"WikiEncrypted:NKkj/YX2GdbxYjFllBaf85rNCgCq5uL2pB1zO7XEUKmMhjb7PB6lg58+jv3pKeTWnYfIZ8MLfxSpbCPGRRW/ooiOwuvYbGrLnPMyxboMdLa+yAcBAcSIPI+4uyDqpVruT1kcgJYM1E7sb6Rad5Gu/MNkw7Jb3UHXXOFkoLHPCSZob/2FQ5cp2A3CJ6SbMgBA9qz8etDuxxqYTZguBfrZNbPb/GKl9gYoBEBRSQW7I0NshJxcNLuUkWErh23rkcCcngKz9pInoVoCbjy4VFA6vu75+p7xblJAKI3ezjUrX6MCaQqm/fNBpGYXIeCNzlSU092sa/S63+ScS9LMLNoxdXlxx9U72dut1574IXpryLDnqKObIE2CMcdOCC8Ku9VYFBp8/qKfluhY4zFAmzv+r2ygxHrpmLF6wj2mtaOgQJIUdBsEwL57s5ciENkOc7N83vMQpko0gT4ljcHP7S+0ydGT82XSSwmlCVa4f1bo3Y7dpEQ74C6L78DY6FNmWO411QRTrtaRVqbMEiERMb86fRxv+8KzpX7Z2V5Vr8R2uWXQVFwFMvvbktuzm4MRpHxrFDqeOTPTRM9lv4y2+k97eTHMKrL4Q7KUQ9JnyuKtZHdW2ObhENxAPa9uRnUIjtxe1AtocKZflU4wrHKjj/pFF4kUlRzszmsdQk+hSMBOtqrfSZXMkyH5zbvuYr7UHW3UnKyAE2Rc2WVGnWx8y644Pl5QUT2AF03fZaaJ/ecD/ZaWmTgkGD+MG9scfYMbBowFXf1xZChi9U+ih2Yerg9neXnExrSI2F3agnNDubB+ynV88/w2PvlAzhNcwFYZMqzOHWKkAy7oFvUy08DY1d+waD1WYJVlgUoTpuzuLFGSsJDLzFWIvCsDoSYFizxlqID+AyCacBk8Cks8uZVJty1qMuDjEAvNLMTwW4MGdCjBBggQaOYxxi3/AukDtcVz4kySTsSUOkYk34zm3v7kuD6DBO6KSKXEWTtb/FW+CgpsA7ChYY/C6Qve3S5VNXTIfnLNALB5kT8OPl4sW+CJ9HnQWda1xDpj4vqZoVg6x+aA3sC0ff46pODQzpSUJF5umFz7rL/Vg5AJX2Pfy5OGf/6JYukqtu1jrS8hHLlM55J1v4i33/7wN+mlGYBTMT9kWZyK1ILLQxHNSMIGZxsb8k9i2cT6bMfd6ipR+FSMgoIgGhORRW12VQWT3FzsqUn724cfU8Y0O4ChCjVvUwLZ+DBqs1CGmsNMLE4CXGOoDyc59oQD/Qj8TPykEzEx+YNg5S1iu8Fclzvvy+QV+WnXL0gnoNkapXXHjzQHdP9O2WwY3nVaYmhhcMLgSG9NDwKjVZ4y/yZkGlDfQM8lbWQQHB+30pn93lhg5/q3/2nZ9cr5rsOAZm0Xq2JmorqorKW1wpayHe5bjJH26XYKZBozalbIJGyVSy4HbR68ABMU6JNULTZ6TjwIZo24CELl3qcQ9sxvLDVv8F0BBXnpQQVR21W2dnyajICyfixGtrm5LHTKAcVEv9w9ZmC6uR7RWhgu23AkFKGQrKwgumoffaBrkIPn706u5CUciRtT1Y90L05XNjeEpvxXXZCcTqELodcfcrAjTvcZ0GIAodEwWsH/IfQCgsUzps9mMOXAHzcYPx3/kPkVQV83MMCTsLTid3athR0bzFXJiJuPmpetKomDBJLfIv/VFWFCAEIHtJ+qALmTi8tn0QwkqJ+qo6ycemL4S7kvJxLH9/XD8xpbqCqmKlskv2l6omMZBqFm2ijFm1OjHjNEGdUMToQK4JNQFuoedzzPOrSC5Eyo8EcBgooz9xUUAJDn2QcHLyfgcZ1ZIIlS7R1rokw/oK4aKPl1z0eQwntCYWeL1bL0HXLYv68Xl2vZgxziY7u5+HYKpkUbnqP+Ieo=","layer_level":1},{"id":"7431b25e-5228-4645-8dd0-ac3a9b31d85c","repo_id":"af949642-5250-4212-ad94-2c3aa27a5ee8","name":"Execution Models","description":"execution-models","prompt":"Develop detailed content for this section explaining the two execution models supported by j8s: main-thread execution via BaseService and worker-thread execution via WorkerService. Clarify the architectural differences, use cases, and performance implications of each model. For BaseService, describe how services run in the main event loop and share memory, making them suitable for lightweight or tightly integrated logic. For WorkerService, explain how services are isolated in Node.js worker threads, enabling CPU-intensive tasks without blocking the main thread. Document how RPC communication is established using @kunkun/kkrpc and the expose() utility to bridge worker and main thread contexts. Include code examples from examples/worker-with-data.ts and src/expose.ts to demonstrate data passing and method exposure. Address common challenges such as serialization limitations, error handling across threads, and debugging worker-based services. Provide guidance on choosing the appropriate model based on workload characteristics.","parent_id":"c2dcfe3e-6ae9-4e3c-b709-8d6995c66d40","order":1,"progress_status":"completed","dependent_files":"src/BaseService.ts,src/WorkerService.ts,src/expose.ts","keywords":"","workspace_path":"","gmt_create":"2025-09-19T11:14:39.731171+08:00","gmt_modified":"2025-09-19T11:24:38.50228+08:00","raw_data":"WikiEncrypted:jMgId5h0EoZtwilIIkOV3lPUSdW4wd1lq59F0GgPhmGSpqUrtOU0314aPlyHEn8BSIinnLRpHbmMFLqW83m8EVzh1oq2EE9BQY4Z0CMT5/0Bli1SXdoK+GIS2u+AiW2RJM/jxH46vZOEAYhg0q2DpxHZwsVA94AYpFl4dPgLzz7lYL6U1PG4MPA4g7mxoM6ynVCUVQC61NtTL3+dPQtYxLRN+nqEXUROfwAxyBNpKZYe2VkcIx31MevnNm9YRX21L1HludddvfccQ2g89+48R/2EH3ptw8NscS7plC5YNdZf4rVDdgpeaAJJ/HsYHBNSyGj3L3PVKHt1MS9SxBrelKCj4mtT1XG565mToO/mSy8g5oPmwfbK9FA1JsMnWqx/hU+0vqJMr6SH/uAQW/ck4sM/0yfTNGpwkBfi2KMeA+WdFr+hs6DJV4DOTpUIX/17JgHuawJInx1HeCa4YNaBTfBOpNDOF0PlDjnygph9b6p+2S3yVNFftwxgJiGTW2yjqFb1AZ4sb9NxHwJO+w8WyPWqoKtonUGxM2ksyDHMymPdX/8zs6oqMAoqnzxnqnxPhmJOu7ql3UjEktfgpgC2tWzrVNh8dxdCwtWFfV6d46Ynaiqx8R/DY20/R3rxyq5nn2juyoNJjRQiMR7cGCHSAly131A+8Auf8Gn5H/jH//wPa9oSpLPOxl8XZFuJcPtkLqruswzjoc8kGhyR2LSsuMQtJHF0AYf2THHdl/Q+wRWOHl2AlISuQecPyKohg/+n//P3na95BXn0qtW6Az5ZcDaUCqZUCUgAZJ8WfGUGERU8vUV/G5FQpFuxqQeGtJ+34nOWh/tVEwZ/NXi1UV1E3YzN+yKgomv8F+/XL26l77iKrZQzgyG26nuMSHlL0YYT6EdLww80SXdOP0ZTYt40Zo8+ILXKK4YbTwZa3+KIgUsugRtMkNeZVpUtPlFVDf75h/kVLdVX/Syb1hkcjRHhoIgbosYtKAIcmF6HutA2Rug0QMgsd6P0RphjzyRwkCAwFFgs1TV79i9jmGrqssuPeQlARcYZw0oOI0d5spDiAZdh+CSzGM5vx94WnWlGiiZihQ/83djU/Oge/c/brQm7kGFDjf17GrJqXP3pwuGdwS1URaAfvX4jYPqaoe+d+AalBJcAEj5nIh0Pw8imgaW5PTa9qAk+y1iGfyLDOxQf5TeHekhWAe6PPE9iC0EYTUbJbJ6BhPCRGxOSGp0gYQjMTtRDmEzBubEHoe57IAeoWf7BPJKkuy+uMryD+oSjbXOXuKRvqqI1/EI89pw/WP6U2WPk1Qnoo0C4+tD4XUjYP1QTKYml1MG+cILJL0ahZpC0TgJu9WzOC5xd4TVqaYfzRLIRNq32oUj27VmOw7hFN/xCns5LDncz0IjyEePf0rbC7LTik9UPvffODlOuFsve32QKMkVKnjeXhvbsRZAKHmPUayXXBtC3VfnlSP1ulDc6PbAhRGCpaR+2QZR7/54n9RREwlV07kBiMKselu0qlk4sBj6K9DtB9X2H1xBx98RvtQJ7UlIb/kCgikPdll3dnt6RdWRDXR6DLw3peMDkdL8LEe8crkWwpfKMOBjJJu9nC0Mzx1EU2gBk+KMI+HPrFPASHDmJJoQzpP8yO+dszXzg5MhL5BpBtcXLe0GyVAj4RrgryzG9s3+48Awc73FmKzZ/YCRvk3bx9GrbvofH490pyiqys3CjCJz4PjusU70Z/nhKjLrLaEJF/yOG0Cui871v8DQlPxoSwqG92GtWEd/cn9Q0a02x+bFvUytLuIZ+g9xWVAxHx1hVpXSmJb2z1yK27J5B0KoxW95XadRVPTyFWW9tRSOjCSlqW290JqrRElBDkMqvEN8KiU+f2ZUT1Q==","layer_level":1},{"id":"0e38459a-d586-40d9-a37e-03317a1f489e","repo_id":"af949642-5250-4212-ad94-2c3aa27a5ee8","name":"Cron Scheduling","description":"cron-scheduling","prompt":"Develop detailed content for cron-based scheduling in j8s. Explain how the CronJob from the cron package is integrated into ServiceManager to enable time-based service execution. Detail the CronJobConfig interface, including schedule (cron expression) and optional timeout. Provide examples of valid cron expressions and their execution patterns. Describe how scheduled services are started, monitored, and automatically stopped if a timeout is specified. Illustrate the data flow from service configuration to cron job creation in setupCronJob. Highlight the difference between one-off services triggered by cron and long-running services. Include practical examples from demo.ts showing scheduled service usage. Address common issues such as overlapping executions, timezone handling, and missed jobs. Provide performance tips for managing high-frequency cron jobs and preventing resource exhaustion.","parent_id":"a8ecf157-826c-4ab0-92f9-9b27421b7df0","order":1,"progress_status":"completed","dependent_files":"src/ServiceManager.ts,src/interface.ts,examples/demo.ts","keywords":"","workspace_path":"","gmt_create":"2025-09-19T11:15:00.596505+08:00","gmt_modified":"2025-09-19T11:25:37.492303+08:00","raw_data":"WikiEncrypted:b/4q6xWd74Fq2lLLnE28hqVcFRJkkMxGrkjOfZ9h4IKJAY23dR1CFKnFqFxxCkS5vnXIHMXMf00PlRGzQbQ54hgLZaTNc3KMzqY0nkFBvqDqzDg6fcBaQJWlzchqfZZ0J7esSPDmIrrRGCpGAOn2ulV06NS/Oy+gbF5GNmJI68U1vPXwWuGJ87TWiDikeyikDx4imhoBXU+M+4eiFTn13ziznap1LALbS38uDIzssyhSi2AdgjzJWko3r5bVlwryYqyYPFoNg+QRPrgPnIbBt3w79nxsTcW0al0FIJiC+OU8A8ugJksh/vpUCulxqercINXD6dEGwvAGsXrAhmCSkFGaMMSm4E+4pzTweE1m0JjnUhNPEMqOJR3Csg1lxWocy+thHKnIpc8amGdg/Flna3hqTCjkUGqiVABpRcP8ZXeCTs3tgvHwq8U4J6Xnj/sc33r6Tcub06+SKqOmaHTSjqRkgshZEeMQyVK6OSOjRi6Rig0xKfUM0408bZJ9vDML9aIR+No0Rr8GnyHu1xjCvk46A0PkFPRmjTMkXu0m1RRxP7CmpNSYyaUnvkk4U2guEom8lIk+jtGp9XH03ZFwl1mPM/x++CqYUN4okt5UJPNOIJSNyYix6m5DO69poySyAM05ihDt1PJapfnLYNSSRnMaDpIVNfQy5tvIioItwteknUGXYplLHDMHVri3PB4h1BxO49RNm7NXw9h//3i+xXk9O6zJVdFHN6CKjPrdjvAkxVPba+qIKu/+VeAzNtg3ylj/tkSB5EHmXmrnSvkYx4UppH7qZQzVaHCtj9tE+Z9BOlGTNi1Inn3NZugsOFe/nCHpqCXhRoQq0fryL+GINCrDJ6wfzDB8+KuyPNDvDNUZvrb1R5dSXq7tJYVDTenB3ZJwJpPK0el4ae5LM7ZpgLaXtEPyRHKHN+Y1uB9vm6VZ3TSbiwMwkKxR+WnrllIhsEywVQ6BJs15Huu7uD6wernUfAxN/yk1GMv2w5eYrSe6YPUY2CmK7C+cNtO13he8Jobn2boLgFowlZyRK2wQBMdhr7Y7nghHoQdRSQg4g+i4ayHfGaBoyZtFtMp1Yd9vNT6+uaXbwsrh96G4Ld4YRETTCvDnr/OpjunfG5imVw/DsGYdy4bX6KGblA4U1b6NU1D1gVfm90W9vTC0AEC+egsHGR/eVWdVE2sYbLbH+wEH0SVJcH2j6rmWTJ5/QZdveH7Ki3lWYjY02JKy8pueFsGcNv102/D0pI9bpQ/VWot4A6I5gYzmgE15IupKeobYmOsWPznaPtXJ7V8lQ0v5uxf3SPYxNNinICYBs+DeXHMCnUjMPENZhtMdy5pNKn20erYBSDfSX8pXM7+j91brzFD+gLfvjMJQEfIFMaCH301FL95eUYrYO9xXVzEOKAYKJY58tA5p0mjU9uVYTnG36P1ZQRCP8IdigYYtD49qOfIzsqTriUOuyas8GvVz5EkXszEjAYvDwchie5ShJZB1H2tWBa/oXpfgZeNZZiQZfVLlA/mFPwHErFkxvfHzRy4rkyeJ/d5woBjYnI2UAGh5NiGpg6qhIDF0LEfwlD93nLRcHqG5XyDO6gZpooXpjIrP","layer_level":1},{"id":"5f94a244-0937-4c2c-acf5-b942a2e61824","repo_id":"af949642-5250-4212-ad94-2c3aa27a5ee8","name":"Worker Integration","description":"examples-worker-integration","prompt":"Develop detailed content for worker integration using worker threads with custom data. Explain how createWorkerService enables offloading work to worker threads by specifying a worker module URL and passing workerData. Use the worker-with-data.ts example to demonstrate how configuration objects (like maxIterations, delay, message) and operational modes are serialized and made available in the worker context. Show how autoTerminate: false keeps the worker alive for long-running tasks. Illustrate the flow of data from main thread to worker, including how the worker accesses workerData via the exposed service implementation. Provide a complete walkthrough of both main thread setup and worker-side logic, highlighting RPC communication patterns through the expose function. Include best practices for structuring worker code, handling errors, and monitoring health status that reflects worker-specific details. Address serialization limitations and performance implications of large data transfers.","parent_id":"f5b3ccb0-e72b-4655-9334-b4e7cea6bf33","order":1,"progress_status":"completed","dependent_files":"examples/worker-with-data.ts,examples/services/worker-with-data.ts","keywords":"","workspace_path":"","gmt_create":"2025-09-19T11:15:05.8391+08:00","gmt_modified":"2025-09-19T11:25:43.225042+08:00","raw_data":"WikiEncrypted:VDiDZJYWRQTud/QhSweUbT3RMJ3K/5I1R3FxTIWZc7FCWL0M7m2NAYCgXEiyZNcr3epaNd527CF5RnWVKhb/t20HE1F/PDvAI6HHuy7tfly3tLniLL3SF6jU9bokgOJ6uMnVefMiYNGQ2IPW9gkMtY9Ayr/o/CvOGP+K+khfWiBcHCjGLNVDWmQ+gpe3prRGxHZvLHXvlIntTchDJFakayATapRjuAlkZRHDSnzjeYp/UVARl8ZaMWyEhCRnAmpFL5Y1N11qofySLzw9alN9v7a8q5ES+T4jlI4fhikDLPyA2QnNHM8Ae3LENkO7j5wpnILszddsgxxtnm8LH1msWqdtBHgHge03KpfVeUoOjGWxZzJCVWEhxmBlZauEGB8m4JdFTejJ3MQs9nFI8tZ+rtOge5OD1FJG1mGganKy96WHHQNILV0OPcv1HyB4jXoqdrv3UuJ0zk92YzslD8pePYy4q96r8vVAJFZLRd9RSeOiiPfpgx6bRFDWWmWAWUwUtmKhNDbPwJ7bqA7izBLDKztgM3kF7SfdNzRzUBI++DxFRRfDn9RJXENPCF5xWHpc452l27Oy2jUZhR5Uk/Qvke6WkKlhtqDnC3w9ZeEv8+vDM+jo+GhxXiVSi3eRljO4HrtRbeWxJzDPTrR4Hs4E7PTtvJivqbUyiIwdO038txZ6ULUcIBt/mjTXvSL8HHyH45UiFLi/3zuII9euJvgL0tvNwpXvNQU3Z67AwkmYdWh6lhAnyznMZH5C9YLGd2ZkIzkgKBmugGZNuid8+lxxKb/HzP92myL4Qok8B1dvg3MsPjUX61Ah83Bcn95NXKKRubeZ1CtljD8/WqIqvS1kXz2i09WMj9iu0VdWEjVRU4MgLXiMMEtDt5gLMtL6bGYI/5rGh0H9cuonu3QN+YXmTlAK2pqMmKA/VzoGzHPzovbcAdkekLm936eE2nnxEeC7y5RpGApmem2+ff9dnq5u+cKLOBNTnL8aq86HxqvJjjUQUqHsO1314H3G/unFYza45JBRJFBh4rF6Uv9ECMPOzGaGJ2Q3u+p00QweJrQBFdzzH/ngkn/eSeXVxCM5aKQQ5mhum2K0aZPFVwHBQE6yb2nw0iWESy/fSQX1K0anV1k+yn/7WYVVEdc3Tgf8JxO+2sy+evbsE+649IGfLfBxB6zQGGVeo7PymYpXyK6mQB/V/dZrCeEXstaPpF2V9vwpWHQXJ9nUqmilRlsoFHfZotHuz/d/QF/oLN843g4CoZsbXt6GSLs6rwY6d0WomVZHPN6446BkdggiDiUMKJbR1a1trY4ugYbjoy87xTYqX507k5w1SgjLCBfucjhKD+3d+fffLQmNwBg22Ktit7IU+nQC4Y7qWmS3jckcA4lSF58xDQKccEsBXvPdsbJNPlywM653as/BMKSd71R/muC9o2QRf3pXRUUXcDIpvdfKn6E07+jDinkjANvJks1jbeTCzhxlaFn/T7lerCzToLitqPKtvAjoN18y+s/Ajx+Cf+rjVH1QdqyXDY/xHRH9CuhtOEkJI66nhyHLrDr/rzQPE++iH30ntaoiunR9IcMDPqFftLFWyvXxDTaLE3RR8PtTTpwYhVmArfos+CslNcR/OJqpj8I8TAcy/UNVs0qweXZPgn8PXoBXr388iuboNRMeWQlkvR2Ld2RX1odbdBi+0k/9EZSLOSeIp14fhPfrIpTa5G5o1jFw8y+z2LDKp8sPcuM0jqMv8qDA8kOeSeHmyb7JNqIduLQjsdUgIDa/2cE=","layer_level":1},{"id":"5528d3da-081d-428f-9c22-017c3881355e","repo_id":"af949642-5250-4212-ad94-2c3aa27a5ee8","name":"Worker Thread Execution with WorkerService","description":"worker-thread-execution","prompt":"Develop detailed content for this sub-feature explaining how WorkerService leverages Node.js worker threads to run services in isolated contexts. Detail the implementation of WorkerService, including worker initialization, lifecycle management, and error handling via event listeners for 'error' and 'messageerror'. Explain how workerData is passed from the main thread to the worker during instantiation, using examples from examples/worker-with-data.ts to demonstrate configuration and data transfer. Describe the auto-terminate feature and its impact on service lifecycle. Discuss performance implications, such as avoiding main thread blocking for CPU-intensive tasks, and address overhead from thread creation and inter-thread communication. Include practical examples of configuring WorkerService with custom worker URLs, options, and data payloads. Cover common issues like serialization constraints and debugging challenges in worker environments.","parent_id":"7431b25e-5228-4645-8dd0-ac3a9b31d85c","order":1,"progress_status":"completed","dependent_files":"src/WorkerService.ts,examples/worker-with-data.ts","keywords":"","workspace_path":"","gmt_create":"2025-09-19T11:15:22.274655+08:00","gmt_modified":"2025-09-19T11:30:11.660888+08:00","raw_data":"WikiEncrypted:NKkj/YX2GdbxYjFllBaf89AnNpCz1swRBUVtPOoBAOJhg1RktDurn5G2umUyjrVH7DrvlQs2LJF7GPBTylBpUeqAhsa4BN5UqB5KxaWxFK++rM2xTv1ZMk7mRwm66YmzfuyEoAgdiYgllWXmAKhjv2HIAZyFismly4flHkxVdBElGv3gIrde7hwVmi6WXpvBMinpt6qheuX3JcAtX1h1DS9EcyZE3156OkX8EtnOxb3RTXvWddC3Fk1A6IiL9Pwo6/47JCmhCusTReirrEjUpitYvbWgB8i6J7Ma0dNS8Ix8wbgU5Dhp5XpZpZeD7yAZFkXY9vKagj5YEU5t5u7cJ3T6FAMAirZ5Scz8Af3xpaNB0HgiAxkFdLFuaLCflOJzwxlAIKtjpU0Kum+w1MPUjyu59AugRZM7dIBHyF95QTmQUXKYuYm88d2U/wpT9fv9O7G0KVzCEFRX1db+JSzUvrcHkzJsojvU7kSpJIsX37t4GShTgO5wlZNcOlVEoK5p++v+xKeExU7D35YcwPpGJu+dUOWYJaPeXbN069RKe5aUokbSsRcuoadr2B2huSeCIOvjyyH3fh0rcrvSwgYYwoXSlIq3essNAGPjL9+rxrjMEUwNxOh+Rq69Vjw4BLjqUWMeQhc1yesb3FJPXtgRH0Ss9fTMEfTvK6YnlSlhDdqPyIj7DGkmg5cADHG/iY+43g40sXGOod7lwkpVeioO/X5HVqY0DmnHnVpTunHA06VM54TdB1mdd/WzvJwHM/pNZm0XEmXFFAGIRge38oo4klUT4oQZYUUNW2WfkByo+a3SSywiJFSGLPMfFB2WuXjUFIExWypfCtJSMy6A72/5o30RxSWAyYDZBI7gsJ6pWpsTJIBcRhgjDh211nVAl//q9i6LWDKp08vSH+NYn9bF85NF5iPdvd7D8tbplJgOz5gcfW3Z9YPZJFZXDUG5KPMasDFrwBxn1kCIFX8famqVaFGSq4Mlq7o8fOVOp5kwMifUNWw78QcG5J8UvbYcrgTvN1HX1V6oKrwGa/TuhMfRBS4X41HbI+UcUIYjdi4a83wUd5SMfLe2bSJKOCB9j2ZHwBzPikFMuZhlCBH16cXMaqzRFTrRFufSlK+rcvHDGT6SqGZkXIDID7I+S49jRvRObTutdYFnyWv/aSpz4kcB6eS8g4Mm4wxOgVUTPNJaBmPR5mCvk+bWJatt15BjmLyMiSfHlL1tn0nMpaXnv3H9wSyNJ/HR5ubcRJ7xFa05dp8xQFiqThvhbSH2OAytjIJU7dKjOa431Xv7iknKd2WO3HwZZtql4pEc1vN9Uw+6MHNO8w3hNMmf1ZZwBUAihJOR2WDme/zEDeQf6GTzb+L8+EI4neMNUTpUnOGBdcVP9vtK6auuRR38CzQ9HisDonPSBNFqNAGTUzMDFZwXKB3urW/6J6LD6fwd2A7JyY51m3xBm5zkgLLiHW8LGL4JWg2O4vlqA6uM4f3s4HAFICGn0DDQzUFyj++HQ4vR6I8XsXz9Y6NqZKZoHPzalg7n1/q2M4oX3iNgAm7tZQN/TChJaetioIwpW1j31j+nrhQHqEYT7kOeS4zlO3iREKbtm9VH3HrB5OeDE3Y7CfqNaa6jUBVBK7pgBY2qQRIsLqxVPikAn2Zbqcv0s5zMWqsxqPqUFTgs7xcf/mU1JYQ0qkpmAASUjZ0r4epYdgKbTLucC1Q=","layer_level":2},{"id":"c2dcfe3e-6ae9-4e3c-b709-8d6995c66d40","repo_id":"af949642-5250-4212-ad94-2c3aa27a5ee8","name":"Core Concepts","description":"core-concepts","prompt":"Create comprehensive content for this section focused on the fundamental concepts of the j8s framework. Explain service lifecycle states (stopped, running, stopping, crashed, unhealthy) and how they are managed by ServiceManager. Clarify the distinction between main-thread execution (via BaseService) and worker-thread execution (via WorkerService). Detail how status tracking, health checking, and event emission work internally. Describe the role of interface.ts in defining contracts like ServiceConfig, ServiceStatus, and HealthCheckResult. Illustrate data flow from configuration to execution and status reporting. Use diagrams to show state transitions and component relationships. Include practical examples showing how services transition between states and how health checks are implemented. Address common misconceptions and provide best practices for state management.","parent_id":"","order":2,"progress_status":"completed","dependent_files":"src/interface.ts,src/ServiceManager.ts,src/BaseService.ts","keywords":"","workspace_path":"","gmt_create":"2025-09-19T11:14:17.442051+08:00","gmt_modified":"2025-09-19T11:17:19.362893+08:00","raw_data":"WikiEncrypted:GJKeAISOpe9fzBR3si6wxLaiETzLOChaSr38e02u185fXg/is87l7oZIlV3lPWn7nRI2hutPuM4rWZttf/hv+22fxKJozGryDu1HDjfE53iKC4ehfEpojron0pTxbvllOAglGnRbyMlEt5fFWIc+0Ck+0/g55lYuP8hhgDRNe09Vd/4I34TZ9ogZxN0wDnpuwRYT+jNGwCcfRtD6QlTYcV9P61ZhjVXudtCkndNNOKCgIKAfS6758g64OulbJTXSLDUu7Q/TurZ0dHZo5Cj4aeL3RBs05GjqUGF7Zx0+yC69ITk25n6+QbqP9PRd8dCZiYQ0oasmA3fXp1seBeZVuQ4JuvTASDhjqXOP69gRQ8g1JKeTifyMkB2L7yD1G5InADCIZBSZ4pha/ICv5VmZvvex9xQtUCnS/ftPLf3pZAhDx0qqX58ohWim3IUaHT3CKcZyTFJcKcpKFHa7PIb6xa9TpfTRJDOFjj86szO/pVEsfN9D14RtA2LagHmWmvs+4dcmR3gv3c4j6R5B0dHGjM/YzHOsM+zOQLidH9opxEqny2lrnSHoJs6YOI09uzgZoe7HhkiKck9QaRGVclcQZJysjndzQ0VvR9xJRYl1uc910rBzPEmj64s/6t1vy2g4nah1J/7A7acUzPUiwFoCuPRjeU1ZXe39FCp4DCxSEZCESnuY4g5spkoLaXA7HIFbg44chKu/H9kwdLPtmph2tOfH4pmswKLoMFjauH8R05seZHms7MtyOB4fxDKK06I35B4kwiO/PGvLmA9LLR95a5F3dPbVn9J/Nq4syBjizjKjEDzAjHAcgopRKl+KTQwj6PmiZh8nFQM7VYxdmhEtqLH1yeU1Kex7LF2N5aa8DJcXjbznlzf/LZSDlgA+/qDfh2pq53COpwk2zSXaxWSaMoMB14Z9aNa6T6eOoLFhtmBBwPc54ixtzLkAMYV1cxM0XFJBKijxQLzMTMCvPh7h2g3R0G0gs9XoC4M4uc1bky9DC/seGYE/BvdVDmHAsUaCT2A44MKmTs1PK2ry4nUCny4rWI02qxUV6Yt6+ZxbITJjKSGISp0KNMq0EqxXbc2yP6aOHf8rSO/syo6mKTyUAi0qCwLO0OklRTcMtkRIr7JFuuYIzLkFhZELs2lFSbydLDn6oui40MDm2YUrA/qS+geMZtETL/yr99OaO2Fw8qJmdNRyWPqjTdFlkeCURe7Z5WC9AgoAyr++0VzkQLn38fyI98U5GOQ9GrtGQI6qcyFVKX4+l2qI7NcouPv3sBu4BjSNu6sY2lUjT6f9d4wvHzT5iTTC2+g7VGO+5GizlDOZ4mGzh6BqcZ59I136fHyk10/pdYmwOxqIhlg3vST/SzgaWxrGjnamu9CF+NE81pKt5QeKVKs05qmmmi/9LwgyF0ueDe9Q+Kc87kjjtpNFaB/31VkqU9q285dYYbWMkTNSk3Adpo0p9SMaCrJSyXFeSlgEw4PeM7bRxFlYuFRMLVbxsAczl98AvSoxRLbkWHhoVrmkmRnmOXf2f4x1/81g6xwSiQfhoyT/pNfFP1D1CsQic0Pfd3xMm+zhTcyoJxU9G2z/C0n1h3b1bm7RTA/IJPuhmDlob9kH72Unq71ldkugMrpwq3t0hn0RJtU1U4LSmfj0OQ9XEbtq49xA8Xwlypv2XtTfUF/5eD4yJXx0XA==","layer_level":0},{"id":"5c3461f6-fd7f-4a18-b615-2d9ed3519f1a","repo_id":"af949642-5250-4212-ad94-2c3aa27a5ee8","name":"RPC Exposure in Workers","description":"rpc-exposure-mechanism","prompt":"Create comprehensive content for the expose function in j8s, which enables RPC communication within worker threads. Explain that expose() takes an IService implementation and sets up a bidirectional RPC channel using WorkerChildIO and RPCChannel, allowing the main thread to invoke methods on the worker-hosted service. Detail how this enables remote method calls for start, stop, and healthCheck operations. Use simpleWorker.ts to demonstrate how a worker script calls expose() with a service instance to make it remotely accessible. Discuss the underlying @kunkun/kkrpc dependency and its role in message serialization and event handling. Address common issues such as method invocation failures, type mismatches, and connection leaks. Provide best practices for structuring worker scripts, ensuring proper cleanup via destroyable IO interfaces, and handling asynchronous operations safely. Emphasize the importance of error boundaries and timeout handling in distributed worker communication.","parent_id":"e5a37c25-eba7-4adb-899b-d4a2d39d1f70","order":2,"progress_status":"completed","dependent_files":"src/expose.ts,examples/services/simpleWorker.ts","keywords":"","workspace_path":"","gmt_create":"2025-09-19T11:14:39.601302+08:00","gmt_modified":"2025-09-19T11:26:37.013772+08:00","raw_data":"WikiEncrypted:qh0EDbmOshnKXFc/19LxQ35rz7VdmMemFOj/L0DBO9CQeAsBkQEwMWGY8aSQCapKSHm3Vb7sBvnLZkAuNEnxLBNu96aNOUDWRznRQTwEwGYVPSVx5e5xOF5D2q7egmp+qLaAIHM4ynNjK7Mm9gZZJ/m1WkaxumeYPmTZHN+cF1muxB+s2k627t8QP8OlEsU4lpLLcqqnlcNAbgJvV0PVJNwtx+PBKVeKEMAz9lOHe6uj1+804/twjD3KttVOsWmrK4xHMmhy00uuu+YLBIG46hc6TRc/cAq+ww5wMQsIUHQTrjVXzr6dHDDGucA01McIGWaWOjljh4Mw2fNHh+ID0XyOQvFWqKB3GfVkH1glr4kTt7NEGstpOwk8jwjsmWiyL7O/bd2FQcc/RxOWjToNlMvVCa5fZjFEkyJQ9SlP/FpXdBtVbewRoDnzNf1HA49e6Snk3+1anJlGwEhBtCsBfklXHQaTrkrwFG0KB2C0A33uLArQw2ppPoIUK+O635Ifp7IxGHFdlBgEn2SEHF4y5WOeFToOfHPusBmkwzmx1dgjEOVvas4KXAVNb1ZlEkk2O8NJejltKP/NE2wbIECcttuRuU530JCIM0FwIZ38bQJ4QmPcwZUrLkROggDvRJvuyaaH+cJHCOVnJIaIJVVF5niDLvySMyWjfEVt/8UGSM5jloZnF/B+sDqCbWqmJ0vkbnQ4kJ5dKZOyd7awA+dNPtNYlwr98MiqqEf/+waBfuAzqpy7dehmHNIQB27lIFCbCvVjlVnNUuhNfvRwrCUvn9k5uaTc7Yn4DMucDVpM2YTRy+6oZKVd8ffmMcI8vPjjjnPjBWFy2/ImrnNiPRGfZIT46MDyidg80TU9YLJyfBPQc2QkCpP2Q25hR+23Ef4d9kyH9Uor2VDTipyrvosJQlQ+PoUQVe+UaBwZ97PX2+0H82ji3Y3luvCV6i2O/ZBf4gVHsyrRrBXBR0kucYrbHr7GiUCOkQIthYvBD4AzWWsASOQ+DMUsXUfagekJKoX6u9Vcq7jGbaR/ODIx1bXBHWtg10cICyBL6wm5zn07si7zIkp5e8rOhBRyDjgwDvAejhmCaCuhQHBN97dXUSg6uDEMlNyMT5L71rmr1aLp7ItX+1UVD3Es0R4S8+ae3b+5eCy2qnxvlUC7Cz5aXfSf82DR2fJs8Mx4U4GRJ6HQVnY9gWtcq/mVmgx33UI5Qf0aTYXP0FvuVu9FyHhZ7l+B4nOerPRIcdgOt0XWKg5LkQPi4sXLHgjjE3MACKq7LRrDT5ftsQRuHPoUruR360z0KzSvLwZSe30sYMvSdPk1erbX53KBlN8APBCG7D2LPZvQWgbwLcOj6UhVyT5rJCi3vSBy+VkSiDKa9+qLBjIbdQvfC+cyZBIqmwgf3xdBp5qSKIHJUejfQgQeiXA4PGTeS5iT/2gI3i0RZ4+Eg4Z4T0uzjhLC+LOAFQDX6kMql+mqVNoFZpfQMU4XLZTu9Tw7Jzug/rrndQzNk5wlIurdkUGw+7hPjGScYD6CoBxDYitvhkMrqPokn4tr/P5ZXk9UzOnk5EXAprjZpAtzo9ru4zrFSK/p0D9QQHFGDxM4KvpS+lb5HVUvXoKKliKdMDnSONLptkhUf3Zz8u9M1aHnrYO5lGOa6NrKThpTV2zv7zgFo43NoSL686UPF33iX0o31OYXuldZBn437fWr9ahHONfFtO6CJ6iTIfIiWvMLTXcf","layer_level":1},{"id":"142844b4-a900-4944-ae66-465a23b06d4c","repo_id":"af949642-5250-4212-ad94-2c3aa27a5ee8","name":"Status \u0026 Health","description":"status-health","prompt":"Create comprehensive content for this section focused on status tracking and health checking mechanisms in j8s. Explain how the ServiceManager maintains authoritative status for each service, overriding the individual service's healthCheck() result with its own managed state (e.g., running, crashed). Detail the HealthCheckResult interface and how it supports additional diagnostic details. Describe how healthCheckService() and healthCheckAllServices() methods enable both individual and bulk health monitoring, making the system observable. Illustrate how health checks are integrated into the service lifecycle and how they reflect both operational status and internal service health. Use examples from src/ServiceManager.ts to show how health checks are invoked and aggregated. Address common issues such as stale health data, unresponsive services, and misaligned status reporting. Provide best practices for implementing meaningful health checks in BaseService subclasses, including timeout handling and dependency validation.","parent_id":"c2dcfe3e-6ae9-4e3c-b709-8d6995c66d40","order":2,"progress_status":"completed","dependent_files":"src/interface.ts,src/ServiceManager.ts,src/BaseService.ts","keywords":"","workspace_path":"","gmt_create":"2025-09-19T11:14:39.73217+08:00","gmt_modified":"2025-09-19T11:26:50.211878+08:00","raw_data":"WikiEncrypted:RIfdD6bOTCP6I5SHLW9yzAzf20Rg4vejZTtqYPZBJUHe1MDBOcT0fqJyIy7k//XKWQ3qYjm5YfPkrg5P78RSBqQYJzNESqb/00FM5VeRgNukieVh8/LwoOgBZGMJrWTnj+JwtRdiKonX/0Q0cTwJA71RlvdnsyxqlIUVGY9vwbxoqPj06NMo9BCC1df66lQJVluG07te/fQCPK+5dTEm5n3pa4NGq30D2a9iew4+Dri9sMkSWWLvid+ngLChZM65r1WgmJIzhnUZBCM6B7DMB84IC/sZ8w21U42Q1vBM/ZKcDrJAeUkPGLb+mh28Fcr/s/0oOz+FM5WtwnTFYpZjgrJpdweAkgWOx9TKPcwx3RIbroawWvYyqISS0udROx+scdnz4J+CDpuiu1QUdVxO3W8t34EelT0vMqfkZ2Wr7e8Yzh0oM9U/JcEe29F29F8GyGkH/xSZ4N2fBkKiY3FuAuesGPkgMeEEaO3tuqvENwqEmfwwu+OcFDxqXYs4QrbpTFQ01+tvtnVOjpZ1HVjih9ysPeP5jBlUWpohJj5SZzE4hiU8L4QOyrRscZ5w3W/Z1tstVn03oxuVmz7QrDdiz92z6acN70zdhoK5jauPBNhpnrfGypngQxhHjSljQozjnH0XJqhWIO1L/QV5ck2QsFrPkJ6+c8m5W7YmByn/ovTbEoaIbwS5UZl82aUI3tsv7sa/NksvnaJtsztama9LTkCE05WFskh7KTpMpdPBc8zt/oKlCqEx/piIqV0Z/y4iPzVb5BdWIkYR4pbyQViovIdzKEAYZCk58Elx/HqxWzBf+BRVzpOs3cWEGCYGKnjpbP41PKDZyEO53QcV4L3WkWb8D2a3cpRipiStC0wDEtfr2GBDZLyWzaUzYdN+JLVLv0M/UmvPPYrNs0T8OZj24Wm75vvhSttl1TVOVsMTFWaQ/WGakbVmycmh3IwhBM3WdH95e7v/YxdBM0GV9sfKGLt8c6zeeBY3ltjotu9pF4Jhu0Pa3LbNyou4e4AQQoomQQgs/s0Q9ctG+FyqjsTSDqXrqX7bARB7OjNDh7vGD5DG1BUDOJTNg5OucXZzJK22uoPayoAuutQSQ0oRhtjBjLPd4O6gKnoIbKb9vC6RdPda3Yh1RAzMo0Aw9NNnrdoMcPSK6XShda7IIEZwKvivBqcjBAKGEAF+xMWco87QiZurhlR/IUz7N48VB24XiKTskOHNENUrU/rcWt2a91O17U9J1vuAT2g/04D1eTGHsSNqASHdgCvXSszsoe0+28mJwRl7o43eKX2oDrETYdCp9dejzLP/lbsk5Qnvw5myhKM2w2ktOwYQxXy8iMlHbnSjCnEDgzB4xlqIimLMlvLp/KvOp3Te+dg3g13CjgOTkBm4JF+1lDcOtxY2TS2lNSxUw/kDjeNqJXJI4xKnfNPLLnJUzOCszTZXZA6Nyt6jt/IsZQLZE0uSb8yMQcRys0t6u1zIzAcmSXm8/OEFfQ1jiTa32JOnW6CHA0NymLScCFNxelgJPVBRxebq7D0tctpORHjeNbGxWw3PJM8RQMICf0vhPufGFKa/Js91Ez4vfINfvPlcAxcxBF15b8cQ1lVLyfOudTxQGVr4/g8BQ5ho9DMXgFwupGVal5j/CvLcn+KvfbCWQeBrqqG1EZamy9WpzJafTv/Cp5m+gnGRIloY8ba2F69s4T8BIq7LfxHJ1+ViwZOfloYWQLrterBMoCGqlnTuqrBXhjRpOvka7CaNxkh/J+qyNO6qneD1JWeyCE4G4woBWYpUQGvNU1Sxbngo","layer_level":1},{"id":"c8523dae-bc64-42d2-ae7f-da6c7a476d84","repo_id":"af949642-5250-4212-ad94-2c3aa27a5ee8","name":"Auto-Termination Settings","description":"auto-termination","prompt":"Develop detailed content for auto-termination behavior in j8s. Explain how the framework manages process shutdown through service lifecycle coordination. Document how stopAllServices ensures graceful termination by stopping each service with proper error handling via Promise.allSettled. Describe the role of status tracking (e.g., 'stopping', 'stopped') during shutdown and how pending promises are handled. Cover configuration options that influence termination, such as timeout settings in cron jobs and restart policies that may interfere with clean shutdown. Discuss the interaction between restart policies like 'always' and manual termination requests. Provide guidance on implementing clean shutdown logic in custom services by overriding stop() methods. Include troubleshooting tips for services that fail to terminate and strategies for enforcing hard timeouts. Address best practices for ensuring reliable auto-termination in production environments.","parent_id":"a8ecf157-826c-4ab0-92f9-9b27421b7df0","order":2,"progress_status":"completed","dependent_files":"src/ServiceManager.ts,src/interface.ts","keywords":"","workspace_path":"","gmt_create":"2025-09-19T11:15:00.597604+08:00","gmt_modified":"2025-09-19T11:27:32.858503+08:00","raw_data":"WikiEncrypted:IDTJ9FasdsbRfFZRsjJTCdgAEohuEWUzHU6CIyirY9xRyw1ZT8+Ld924i6zY8ZPMcBpsz/CDBMIEvdzUWPJBU00JVH2+uy3IYz1CFH+HBOULJ5tZ4YlhIHyYx79gUJ26B/Pb8OC4eoMbx5hGciquF/f1Hwkt7sXfKKPOb64dmNNQStwqyG1eX0yzWbq8lOXzOwpWt+oMx/6pKc2Cp58dzeha3pozutBbvhMs7X/oCoDIINSGFVddK/tT/q3/K6R4k8LFZiQUbutwSfaYisx4ilrN1zvpYoYh0MdSVqC6/uwgYyTswn1NGyYfFwc9cVhU9YBiTi+Xtc55IG9QBF4RpRBA1b2SDYsrq1qzVtkS8u7TvVjTkD75xS/La+Tx2+Z8h0+zk1PF9R+KyOwicFsI4FzJ0BXtc+HknKxQJThEdcRJS7xtvDybzyRdG7Ba/JLr53qN0HUEjoFWrWGfciCyBzi6Jpsa3z2UopTsPFoJ1wXrUbzvmVwukqgvTjfHCC615VLzzXNsMpsg9Z4e+LTDX4jt4JeDdtQSs53SBA0DJe730B5phq0jdxY1v8Fzemb470Mks+tp/coSeTAXF5LY5sL0RHRjCBLj0SzuSqpHC3BvgRM1KpGAUnRkua5EeZcH4J/BQ8iX8r/ZLkmlloRXnbbdS3qDHg+UcgbznFtCVrwtIiSi5tX/FhGPsx/ulFhzJrT+EISWE+G4NiQBfapRp9nk1X8j9K/GiQ/KVMFwBnTqzlZx8JYhm4VAGRZ+6BB06qGRXmi0WD87s/d5/CetXdevqW5+uT7N2OHLYgLl2Rs6GHW78CJ6Kpq6yPCq+iCtP5Ujx20uoqhOkfVb1FyZ4ZBI326f83a+Wv/KAIYEAKTNDxahd2CDwRK7/CjEfVG1Pj4M9cwJwyiaOQm+7PN7O2BvTeLWSuY+TX2Our+aas4AAwGUMMDpG84+VcZNWB3C3r4wcheh9UGzY/4cg5N24Bx/cMztH/U3jysW+ewF65RUIZ5/fHhpz0ibokEDuK9LkIQzEKn08NO94FYr0RjBV6QhGZBcljFPR3kZmWmAh2HganabOYOcfOCKKqiG04+plC28mnVRTQ7b68+tw7vF1CpcV60TvaNwbk1r9izID0M0UjChoPECdGvu3uo+RUQtrdAg0DBt2lZQwIBwq3cChDqGGCnCgG31ZqkH06v74LybGPrBcVhzIbP/wtoAs/pd4XhCwE2ObBIALMLRTePElcD2/fpLPVTQ7PcidbIQSTp7VeQ/Hd9KjE6D/of9xqZFfkOwOv3gM//UXF13/r+8oGXsnrHAIeo0+kGpE9U0WmGF7h7e8OamNcO53lPZtF5daWvQDfQjI/SCQSz2uAAqHplxzv14IXczOOAaop1s2cJmoN8SV7VBiz5xnHi1KBwy0KbejPoCTHY6WOruuaQSGxwcrtfE48iqJ5J2q4QRmou9pTuyQlWDvDdaSWh5F952+k9pXaMkiXEtk4V93tQQm8gcFE/ajQFuzxTdyCuH0VUlLIAAAhr0JeIxGODcxrfIvG0gniG1dhPrM2unaWu35suwKPFJma6E+VBI+sJcJsV6Z25TvdrP300nPyre6/pLSU2VZihTN1YXwmQE6wiTxji9UiAVdx3GZH+h6XDfUBP0Yuc1OkPYu7f+FlFm5cob","layer_level":1},{"id":"1ddb7734-d4bf-4172-b56c-31874dd3c088","repo_id":"af949642-5250-4212-ad94-2c3aa27a5ee8","name":"Failure Handling","description":"examples-failure-handling","prompt":"Create comprehensive content focused on failure handling and restart policy enforcement in j8s. Use examples from demo.ts and worker-restart-policy.ts to demonstrate how different restart policies ('always', 'on-failure', 'unless-stopped', 'no') affect service behavior upon crash or termination. Explain the role of maxRetries in limiting restart attempts and preventing infinite loops during persistent failures. Show how ServiceManager detects service crashes and automatically invokes restart logic based on policy. Walk through a scenario where a worker service intentionally throws an error, triggering the on-failure restart mechanism. Detail how health check results reflect service instability and how this information can be used for monitoring. Include guidance on simulating failures for testing resilience, interpreting logs during restart sequences, and configuring appropriate timeouts to avoid hanging processes. Discuss trade-offs between aggressive restarts and system stability.","parent_id":"f5b3ccb0-e72b-4655-9334-b4e7cea6bf33","order":2,"progress_status":"completed","dependent_files":"examples/demo.ts,examples/worker-restart-policy.ts","keywords":"","workspace_path":"","gmt_create":"2025-09-19T11:15:05.840188+08:00","gmt_modified":"2025-09-19T11:28:11.619483+08:00","raw_data":"WikiEncrypted:VDiDZJYWRQTud/QhSweUbR0yxztlXMbRFzIYjRVbS4e0jI1ysJaa8YN8G2RzjlXa8YLFPIRGFtBvr2YLRsODSSwtXRBKrxLXQtoMwc03gWL+pCEsUgjYCj/Ojl4Z51McmIUh84Crs3LqqMVfpZTp3jn+dIj42D7zJhWlrZhRc+wcD4VPObehATDFY0Hn63pHDjRLIwi3A4UZqcqRctB5SPeMKwvlCBc9+HmLrZLEJG+tqqzsPyuwMy0IaefzstmUky8sUAgAinxoxaC5Q6EcKQ5huqBpMUnKKVHJECiXf/4a0WsH4VLWNo9n+yt5n/kSBbKtnwyjv1qBvxZAkBnFjMtU1F7H1WOXPLUmWdcP1C3mGJX/NnDBxRiXflZdGt8QDVG28iodkx2RjG7M3dgG54BzJmmE5SWYWFPDch6cE6CGo8saULsS7Gc4AbLkn2hOE8cTS33DTjDpNJTnzK0ee/91uGK1AD79D+q6ZERMEs/CnRl3LPfB672TvTpYDfVppppzgM3WBFvYl1yCm/EIrmwvMOH4LY34mJqQxBEOoXKVXlXNESlqhhRnTlraXhRF4bqTS3WGfS4r09ZPgbFqyRBWkoGELKJiQMAREvuDW/3+VYXahejncBjsOZG6fDQTBgEN7FOEEp75QaWzFkkaHNlWk+KbIibPhOK28Ge7r4/88s/mfSlWH8IuydhsSrywhG/XvI99oHt9UG9vPUrnI+N++giWDpyJNlEJu/qjDQDkXWE5nxAAHVITe/c0rP24Ff0vUeT+6kgrODWMpoNmkSaTd+/YYVJTUalny5n++m/IlsvYgAIqqjo9XKy1e2k8uXmqLs8GX2c3GFqaWgpJPT7RoBH3D2yHwBwDv1/3WtABK+2o8+RDz0kf9Dsd6jUsVvWXSCM129OhK9MU42FZAz3/Zc9q/Ta2aBpxNuJhpfYCRkmTo4orZi4gemFXSH65gjjGttMWJYSpOnzDXjvSJSC4E5B83APwHW5XDwUex6uRqelFKNLyOVZaIq4uyn55Z1B5jWVwIFdABsTQ9BxZd2m46AwqKcKxkmRZROp1Grh4ZLwjYloS/0SDdbzz0rKRot7VKtHjI8cMR+RcK2/VG3idlA8d/NNzTiFgFRVU51wWgqnALL8YsnPKscKn1/NH3b55WNbVMOpCQXRiFDpeqRR8DSwqv1Gb62WfuEUSa3TpZQv/8P+b5vSVGmmtfABeTCzisnGrNlEw03I8UidW+EG1wpL9r38ZKdv7oHEkal2UXprqzInOSXfBTyGa/7U9vsskstPZG92eHSKgNe5RnA+y90MzTzIC0I0qMeqKHr/cQHNVudJuf5tMSBcZ6oqNrIvT38BD86z6Ah4QJN3iaT1OpKrgkxuVpvI6HmR8ln2qmr3+NEIihQTOnTvsEJCztOyD90TAACrhReSj8QRl+PmY1wptfd4oLkgmG5rvCBDJnROcgcrznaMUJF/yT7RBlaiYvq648MgLFHj9xn/TKwpGiZG57ICMUllqVwpgmLGbhyx/T+2q2O/yfk5NqWm2+TwgfoJlNjZPeC+42Z7lzZtVLx/ckXNV4na5dWtG/gjkwkY9azne50/ylFfkU7q49iyvZTjbTt773qMzRB2I4GRBmy2wnE2qSzgI8ZYHBPxMOR+GcRl0Z7nhuiOctpH+SCZBsWIMF1UimjgC4/jLsxrUxDOUjSoP98CH/DKJhYAi03UY5tNz85WDLsMGZvib","layer_level":1},{"id":"42aa2418-3cdf-4ce9-bf7f-03ee1964dafc","repo_id":"af949642-5250-4212-ad94-2c3aa27a5ee8","name":"RPC Communication and Service Exposure","description":"rpc-communication","prompt":"Develop detailed content for this sub-feature explaining how RPC communication is established between the main thread and worker threads using @kunkun/kkrpc and the expose() utility function. Describe the role of RPCChannel and WorkerParentIO/WorkerChildIO in facilitating bidirectional communication. Explain how the expose() function in src/expose.ts simplifies the process of exposing a service instance within a worker thread by handling RPC channel creation and service registration. Use code examples from src/expose.ts and src/WorkerService.ts to illustrate how methods like start(), stop(), and healthCheck() are invoked across thread boundaries. Discuss the serialization requirements for data and methods passed through RPC, and address potential pitfalls such as circular references or non-serializable objects. Provide guidance on debugging RPC-related issues and ensuring reliable communication between threads. Highlight the integration between WorkerService's RPC channel and the exposed service API.","parent_id":"7431b25e-5228-4645-8dd0-ac3a9b31d85c","order":2,"progress_status":"completed","dependent_files":"src/expose.ts,src/WorkerService.ts","keywords":"","workspace_path":"","gmt_create":"2025-09-19T11:15:22.275701+08:00","gmt_modified":"2025-09-19T11:30:25.452817+08:00","raw_data":"WikiEncrypted:R0G3ZSJnIytJFfZrE4O+OMmeXTwMYyXa3PrCuGWavShTfrPexHg0qFqp87LZ4pgIolL00ZlW67MF1RQh3ICFt5Yf0lno/UvNBadssGXZIUvfScq9bpKP52n9q+8Yln1jfYFTzJqApRhcOXvaCC+g6iDvnR/6hyy2/KF7GjyHxBgFTOIx4SsE9bttC9M8nMobKowRxnwm6cY+XCvzOiKrTggq7ok1VEQhnAt3d6jLAhq8ixUq9nzsOc7hZ3uvtTPAWpiE2GxTf3852hNY6lo+E1SpXHZ6f2iNcTQ3PRZA8DlpwKz/xEelA/32jKBpH4TFEVF4tL2xR2NnVKzxDCA1xbiBFVDfyRDLcsEn+PZe7IvqbuC4qaEJZ1tglTpBzMq9ciY2cZ2eJZGgMJdFptKzVSVHnjMYvBD19pZsx/6CmlzNcvIMm7XrlN6N5IMjP706iZ6SZen8U6CfjcsnZhxPcyx3/Xfl+VOS/Hsk1p6FNMgshKqqCkLq495rhEyzklL56mB+m4RhdXba/YFr9YUl51VS4xLQLgvGyNDeubH0Nwj9Pq7zGZOt3Um2Fg90U0Jsl4qh/JC7sKQ/rtBzcJXLsRlMnh6ig6YoWt/uEmHhl2aMrHH10x159VmJkDWXc0FfXwzTdk0lZIvWyv53HGoqgSqBw0QKIaEvUJNYmNmVHmNObgzFoLTR4ZDvGESduzO5lielcVGAvU0FDni4IeTH/LZ61mkjxRhC5eSEX5TXelBXLuu+Xi1YQlWWBHVSI8kelVMvLvRnVkRxKLpiiGv+WPzSdGF1RGyKNNjkCFv4Ip4p8cq1pwYen02UKUy86r9L3LICiyZaFZ4dVKoEynBbCWzzZnUB5CwNGzXVGKHirrxcGgOB+9g8E1twGtGOY4qLlittthSFhJT3etQMCjhZnRHljSbJ4bEyu48/72Db6e2TypOXTpnM2+Hu8qYujb5YDyPkGGK6uT9RU6cUsGY8N3/KFV+3C8S4XLv7hF944DMqIvpacCrE/C4w6sLqwEv2+wT06WcgfcmzSVZCgw0SVxgiwQeNHAvGw93NyGteKoKL/JfUrNmFjq+6Q/zpfstlyCye2mL6wJZaeT8BjiMVk+GqH8ibP7cckeLUsdz9cNPUcEcLblemtqxhJyupC/thclkF0woiTodfNt45UvQX7VMAy+j3HzJEFVO22QAJWoyYwoPrGaLPoMAJ5J6bOmIMvtHns9hTLx4tgyiss58JSa0q4QlXTr5q0s9euE9p3yeF20T5jn6Q45PPb8KIqYDBp/uq8AlKjpf7m0/zBXOtYH0gmrWvZ/uNH7+knVb0Monsouu5dg0evcgQauzk1nNSPyC4x5Nj4eo3jTDNNPp8z5ktkPK4TFKt076eh6zkIjH8CTqTNQ53qOkHkcahgc6V9uZtgfSYak2+YtgTFFi5BXhD0GT5AXCK2QMyvOgS5vN4AG1yjtk/KkXBApYUbloMIf8YSRkTpYfPMUJgWufu4pK9KJN2fhcDbZ/237Qp5d4Y5zJ4kOeNg4N6z8A+0o4Akbe40H0hOUPbPwtrSs/mPrHxCfkXxDpn0OZJ/fuavKnjNWZI+JKlaeCKF2KEfjeYaoYyrhsqIXNBa3qLJ4w90x5PlmCqwzArexgbbmHps4G9taPyw9HHtvblB1W9TX0Jla7q8TxQuKV/tDYzmrQ2kcVdAM7HVybgnYk1DJrUSoK3b24WXV5WXUf+8oeRNqQLVqbZCx3sKo9NHnXyIn9xWw==","layer_level":2},{"id":"e5a37c25-eba7-4adb-899b-d4a2d39d1f70","repo_id":"af949642-5250-4212-ad94-2c3aa27a5ee8","name":"Service Implementation","description":"service-implementation","prompt":"Develop detailed content for service implementation in j8s. Thoroughly explain how to create custom services by extending BaseService for main-thread execution and WorkerService for worker-thread execution. Document the required methods (start, stop) and optional hooks (onStart, onStop). Explain the expose function's role in enabling RPC communication within workers. Include concrete examples from simpleWorker.ts showing worker service creation and method exposure. Detail configuration options like name, autoStart, and workerData. Explain the invocation relationship between ServiceManager and services, including initialization and lifecycle command routing. Address common issues like unhandled rejections in workers and provide solutions. Offer guidance on error handling patterns and service isolation.","parent_id":"","order":3,"progress_status":"completed","dependent_files":"src/BaseService.ts,src/WorkerService.ts,src/expose.ts,examples/services/simpleWorker.ts","keywords":"","workspace_path":"","gmt_create":"2025-09-19T11:14:17.442901+08:00","gmt_modified":"2025-09-19T11:17:21.768648+08:00","raw_data":"WikiEncrypted:vMsgMax61wW2sTWhXd8DH+TvX1+5jyZy0lSen1AKP/RF4AnpjbKg6tPphJatzM24HcW7Woo7dXhLCXejDZBW6qjW13l6gJbzkJ4Ump6D2DWk1LwTPR9d/8NDwEwe3J/KiwYTmq12dWkH7vYdT4pnbV5z6WK7WwGkWQA20UMAyk3jbyPwlb/K5+7HJj0lMuzRnSkF4tMJHVnylY8eFAYBU6ocVAFg5Al0vgylSd1z9tbj2RaSX0ZMD9q9iENDGJnENE6Vgv3R7TWXbKxO6hUw2MWIAA6Pap0xCoMkB+0QulvTS+YpJLUy6aVBaP2VYqoSux0auEyB1L9oz5AMKUaiaFEb82LutqhhLeXzY/S7FWDcBy6/2xf3ABJpsMKRVdROkgv4/lsbOhhEgu8nrWl2o7/cNs9B+FCpBDkLadONldsJHw0KrUdQvMKml7m39Q01pWIZyNz2PZquLY5qNH3yQuhqDMiBpZKToz1IYRnUWWSElET74QemJ53rSphRr8fQuBrAor3btaweJimsPpYTUhL7Ww5VTQ29/1/oSisicGfoLIRL5/0+PA+ghLAiOc+mGWX6UgJFRx5Riw3rdAyorownx0wEQGqtX25PNdUFP0aUzPgSM4bxJMq9u3hPOBD1B19d3kc8o47vXo3Gzfp8CiBQ3EAmH3lU5W3fQhR99lHs/3qzr+Q9owaDzjxuIYpSNsvWj5g2dG2vfUYypQ5O6KHOtZW3afe0DK2chqiqafTod6Yp0jzJ5ibS2QUgt3SEA861G4KcVnskuLWYmZ1kdMbb9zikfySpzmm7uJWjHtPRK9+TEUHSv03Ak2IEU4unrH/olgQgFPF5K1eiZUG5oZZsljATx2tNxSl495ebhH7Q2nAF7myQVCHGkx5396RxWkQ+euBeNewluTQB2y4IDV0rgGGFwX0XnqbZZWEcFO5qnaZl4RD2moZtxSUxFEMTW3HKcDgHrmIqJ0eAdLrgMqhHd552I7GG0EUmzgHtNdkJa2PtiKwlYyytQTH7m+M3evHwdhU/4vwKA2NP4PxeygtSAZW9qkwT0HwC3dZohop8h8vASEPISYKI483bw/dE4NikcaP02Uhjmt1isVhQgj1OBtbgScYQqkFOaAm9EzkoLi6N2Z2EaogNbo0nRlpv/A07DFg9N2GHfTuhCXLKmVU+ZlgQ/4QpIgVgmKX+qiCJxXn32i6PBAQbCPbm1ieogHndPmk9vZThmEEM0mI9zZv3Lac+sc/3aki3Zhbz92YWogqFjJHiB+0Jf6dOxIMmcDPk8w8JREGUC3mXgfPfNZLQv5LoVWiSBHIB6XUfUo96yolfTBWh+3sJ3FZ8/cQuEAmz5D4nVgcn5esn/qGiZ9AkyD4QTjKVo/Yh7btK9mLplDqj2rynLxXeDtzzUEYG2D+r34vpMqwVuJQsK77R1esz040DxaFuo44JHoFowvHJVg80ClCnk+us0ys608lX3LQVNRWNSBSM2S7VuxO+2RtXEIGXg8pXDRhUaPdzImysQxZsWYP4n0VX3Db43F0jBx089BERqUCZ+ENhqYPUD3Os3vGt1VVqdxla+wTisQb+QdpyDL2u/iSokuHT+zObEDTmXCzFs0klSd5mooqD5o9RyrKZkLvCYLBjJIgkNls=","layer_level":0},{"id":"fcc4bdec-36c4-42f9-9db0-217801d3edb8","repo_id":"af949642-5250-4212-ad94-2c3aa27a5ee8","name":"API Integration","description":"examples-api-integration","prompt":"Create detailed documentation for REST API integration using the j8s framework. Based on rest-api.ts, explain how createServiceManagerAPI exposes service management capabilities over HTTP using Hono. Document the available endpoints for listing, starting, stopping, restarting, and removing services, along with health check routes for individual and bulk status queries. Show how OpenAPI specification is automatically generated and served at /openapi, enabling API discovery and client generation. Demonstrate Scalar UI integration for interactive API documentation with customizable themes like 'deepSpace'. Walk through setting up the HTTP server with @hono/node-server and registering the API routes. Include request/response examples for key operations and explain authentication considerations (if any). Highlight how the API enables remote orchestration of services, making j8s suitable for distributed systems and monitoring dashboards. Address security implications of exposing management endpoints and suggest best practices for production deployment.","parent_id":"f5b3ccb0-e72b-4655-9334-b4e7cea6bf33","order":3,"progress_status":"completed","dependent_files":"examples/rest-api.ts,api.ts,src/api.ts","keywords":"","workspace_path":"","gmt_create":"2025-09-19T11:15:05.841024+08:00","gmt_modified":"2025-09-19T11:28:54.868427+08:00","raw_data":"WikiEncrypted:VDiDZJYWRQTud/QhSweUbcM9ahkCkrCYwhzI0iTIUpQchY6Cf3hNJLLbGoqKNMBez018FshrwKl/wEUbC4QNLTVjbrIZSEQnD/SITbsgGEz62KdJsIfN11H+Za0ufLIvpXmBMm/6CADh+1121HSDoM6Yey8BbArwKuSOYV/uCjjd214J6Nkk9QEFADCeQOuBuFd4XhiBolJdCjvm4kB3aj/ojNhrRK661zn4TegfokWVeylgpzONo3wxImG9UYOer1dCgRwZd2VbWPGpPH4K5VoKmFynY59bBwrAIWEVP/QUbmDBXQr7Q/VN2zKSxTcu8CMWwQoKdtLUQoZstYMUs/mCAieDcAJs+S+fQGVk67ojDWLtPFOJNjpmPntQYgFR/CFG+LSnqtyFIs2DcT4y9G7y4qTvliL2diXW9PhAm6JKW7jrE8/EiRdAAjlpQaR26knLsMTu7XTxjZ/Pymfe5IjUe5XB58aYa13zk0KYlUnzULci9jXoJEeucNB1i1fQCrsR4fiZFXY9R43UqnRuOEFmHNBx4JmUbPGoiO3F/+5xrcZotOhpjTjzA4KsrN8ChKAor+raPC26w9Cv8YRuT3EV2aYumeQj3jWFihjL2RT9StkmokpF+h7w3nituoE7sZIHGKcR0r0enppOEZXiLDkL3xOrFjTqGqkGkrK8G2RUnucRN+bJZ/q0ow0Deywj1uAI44YhbFSSpL3IB+w7uV6yKgMKCvd/hApC5kwwLtpkcICOvS1qvxZiqW+2J6H/Qxzt5kxRyM/ej+xLvvFRQMwsNqMl9xjwUpmHIYCmmaVqDnOgEdIGW5+pcOlKDy9Za56daYEMM/cUd+DV8Ckza0IUU5AjM0ycVyj9yM7VDLL40ZkHO10N6mdvoS1qy+ZPIohbz+cgCvi+D04TuctdxH/g/JMJAMmmANX8nM5KEaVrYlcd6xVJN01f4Gf0Kgo6EcQRNaeC4cs6iEvzwlK1ylmhnFhj1C5akUwfLyc83XIku/SXoqa715aG+ga/nhErUo8PbCvZJMrcMpGd2ElqUdMldNjz3nBoJElq3FNpLige9UyFS+Wyqx7ZmqqTTfNvXQd+Gdxgd200kRdsKZixrGb5xONqiDVA5TLrtNY1Z8kWQQGAC06glPxtJZ7YVcjP0NRPzCGaFk6k+QOSsdF7zaClGABiRvN1KhUG/WSEP4sJqBqy+WNkbRJd2J+yoDOeIuqnLEDfXV3aqaAxpuK0PkJRYw/TjZAAwSXqQQWBBZ1d32PRyX2R0WgFDDwuMsxuFM58DTRbFd1nEEQg4lTe3IK/bhXfHfP3PnxrnFYD6xzpi65ythb2p2gkMM1ckZFfoLbOaoIutJFRXavlIBve3SMtfpmsjQRabG4MtyjFW8vQlRmsi66qjZO59S7H1TFgLmaega8sH5FoG+E2f0vDDCj+8Wv1h5PM/UHy9A4nHufe5H2XYJpS8SnNtjLA/ITsfL/zxXc2NPDjYCKnfsI1mGdEAtwz9F+pYYr/0wBOxBcFtTRm+l8aFBLfyB3+pRM9soJIzmWooF9dZl7ErfVsu+xTzRlf318chn6j6meP5w8/0CwIsJjMZDG0u8EKcHP4kyB1+xVzoKchD53bxuieuIY6WLDvnCLJn2ZEqsAp+EBsz4aCpMo4v3J3f2x9mGCdzRgrKVZiTFWBfFI8W+RXbWb5EHbOKiXWdaO3RyNVpQuEmNvZWlMYjl9Mo68NxixAcF7SEMvtSIktPOUToB3IcVEuGXVSTsT/uiq/yE3cWhMkrwF5+/HAUxpDfUJnxSi4yp8UfUXCL6qQcdyptoixbA==","layer_level":1},{"id":"a8ecf157-826c-4ab0-92f9-9b27421b7df0","repo_id":"af949642-5250-4212-ad94-2c3aa27a5ee8","name":"Advanced Features","description":"advanced-features","prompt":"Develop detailed content for advanced features of j8s including restart policies, cron scheduling, and auto-termination. Explain each restart policy strategy (always, unless-stopped, on-failure, no) with configuration examples from restart-policy.ts. Detail how max retries and backoff work in failure scenarios. Cover cron-based scheduling using cron expressions and timeout protection. Explain auto-termination settings that control process shutdown behavior. Include examples from worker-restart-policy.ts showing worker-specific policy application. Document the internal mechanisms in ServiceManager that handle scheduled execution and restart decisions. Address common issues like infinite restart loops and provide mitigation strategies. Include performance considerations for high-frequency cron jobs and resource-constrained environments.","parent_id":"","order":4,"progress_status":"completed","dependent_files":"src/ServiceManager.ts,src/interface.ts,examples/restart-policy.ts,examples/worker-restart-policy.ts,examples/restart.ts","keywords":"","workspace_path":"","gmt_create":"2025-09-19T11:14:17.443939+08:00","gmt_modified":"2025-09-19T11:18:17.491206+08:00","raw_data":"WikiEncrypted:qSUmbhu+RuqdVWUcJ+wGd4e+ZlhOlcU0FTi9snO9I333hGFp1gmtcga/bpsuJGAo9fOYhg6U+uv5xd/Jo0u9EpHuTt96VfAHAaO9PHOz3KLr53CdxHdx0/99O8DFFOJqxA2+ycQDk29P4jmxPQaXzktYCMowi0yicdgSYEa1Cqmf91YZ6LfH7C7m28UNp+nN8kIyv8JnkN2pz+XhgvElFVKOQaoS537bTTgteGXx2BhXCoCiHMvjcQH2vRNSQR2dvCl2W3Bh5ZEwOn1JhvDCZm+54jrBl4aj3hVM7YIdUwf9bdXLt2rol+nCNw2i0+wVwjfqTW7qmtwoneaYmMlT5M32+jDFc3fEIVMJqkPRGPWkuM7aSELkfX65Ha5CWtfWX+e/m5SymgYz+MJP/gnoLXCUT0GB+VI5r0KD95HG8+oglFWvN6V+u7ZT/og4QDLqZjCFxzav3qS9AubVKju6sEciu5QiP6ldA8cIQlB/JzM99TltZ1iqK53E9Lq9aqGKrIP+kFDHSqPjbG9LfjUONm3P1PP0y+OdCGEE3woy3Yy4JLSrcL1Cw7qA4IfJ1IiQSj4boi2++Fw3xZB4ITYW/qjiOxEVsteMRR4S/1mtyuq5EDq4tqPUCKPQFPBIM+3EIPj783FS5xDomN4HM9oeEwOWZbaqhOpZ1vtXzCRCAg3mhAkdLRwcGI+XRtavaU7oObwlGO79hp7ZqpIEWY4tiINLRZzqFrGJGO3V52Uk9oBt5o+vbZ5hFxXCx6fMK5O/G+2h3iF2LL7OBBVTU+aNvhe+GWey5VEwUuUOY52Z2JJmJIROIUcQfnnZlgD9ocdlpMzJd0QreXv6Ed9OCaEG00Bki+gQwdtvvatnm7CPhyfXcfw9ufJfCuRNWh5mY/G8uWd10cFz3HswMXs02Hh+b4MD5uqYgAPKYWDPywE56CEjBOKszb7jHTj4dUuKzlp7MHigOUp8xMEa23zOMcRlhKxJQD9wuOBMEoA7KSE49D14Bc9FAHPlK1kmjUyQMsUn25wmsZxFI8qh5+E3A4feH+zFpT8CDwJ+8ogsNUCMk5K+p9UuLNCRe85yFh1r2uYEwtsAUu1mGLcvm+HU+sJtfb6YXPWCt/ODI4oia+OsVeSzTzMqyrn1mlIvwHvglzqAIF/EhEGucn/LkfwR0yYBbSOJWzv5ptyqU5Vqx2xA9BB/xvaJdA6UXZg/4vul2hW4P/5hoeO9DshQePWa27W0kiApcEwdVb3lIF67J+JBEnjAu/fQxZ7D8bp4qJN5jmg3xXlY8N648qOKHqwOXQs7aVEn6vtAS8wIyyQ5AQ/1jc2jTanxCi5QUb2xOm87KdLGTETQ99jT2aEiVFbrGt6r5Jdp4s/EzYPNbXm6eaiVsXTd77D4em4V5v5Jcu3XX7tB76eGy6GTJU6xpj0VSIroW/k+qdKobSKH1Lu97rHFJDywGmneOwpbCJjHe93Nqe1BPHpm/oZcHG4WtI+IxU1iKYOfHm6DSo53yflzBsjU10tuxdIy45e5W4hEoEDPU3nU+H7DhGzvF4ZEQd7c4HyXe19gyYtb6MM/wc0frmbz2+ZEr2ifJk55B2SBQ1vgZOFVR4LrGJ7PMBw9iKLKrCHDM6JJizKnKr54WES2hRbivml5pDmo3/m+jfsP6tG7DLYmnDcyPZnOgL2goOL7TITqig==","layer_level":0},{"id":"3a8d1efa-4770-4054-8eed-b30fd336701d","repo_id":"af949642-5250-4212-ad94-2c3aa27a5ee8","name":"REST API","description":"rest-api","prompt":"Create API documentation for the REST API functionality in j8s. Document HTTP methods, URL patterns, request/response schemas, and authentication methods (if any). Cover endpoints for service management (start, stop, restart), health checks, and status queries. Explain how the API is built using Hono and integrated with ServiceManager. Include OpenAPI/Swagger documentation generation and Scalar UI integration details. Provide examples from rest-api.ts showing server setup and endpoint usage. Document request/response schemas based on interface.ts types like HealthCheckResult. Address common use cases like remote monitoring and orchestration. Include security considerations, rate limiting strategies, and versioning information. Provide client implementation guidelines and debugging tips for API consumers.","parent_id":"","order":5,"progress_status":"completed","dependent_files":"api.ts,src/api.ts,examples/rest-api.ts,src/interface.ts","keywords":"","workspace_path":"","gmt_create":"2025-09-19T11:14:17.444705+08:00","gmt_modified":"2025-09-19T11:18:55.229576+08:00","raw_data":"WikiEncrypted:DlNpwNIyk3e/c7EHBrhJxSNVzCqkhWFUm0j7TICpLa9pm4IThJMj7CEwqLSTxbjycsegR/mf8wI7DkLnGDJoIzq26lbDF8EdUORUQVr/ObqLDpil/cp7lEvABneqh56G8sV8pIvJ7ieZTC1MW8YvMnUSBEZv/vlPndjQky0XIOJtyEBTQznxadz9AISqLOgCCbEYcNMtrjyqBqQ1qI6d3k2femOB4S67wZuq1AQDx8W7kbTqGd/FfDLSHJxkKCixd8RaayV12yC8gmPTcRiPrwaNHjTfO96ffa0VScAWsrsUcDdTa0pIoS+pqC5TQReWqzD8aFTE2WLtreA8vLIxBn5e6ofzpCMNtO7/hmpyxgmnVWd0CBFJqy6kAt/znwz/old+Df5AVVYb9q0zF36KL07QghtYL1ksCjHUkhBdfJWqKUBoAiCOWsDwLijy0SZB7IWE1+UbRt7vwIpUhH9nMqPPsU19gpvx9Dy8PmNF5xYauSPEitU99ZIPMIPcvYHT68wGRLCV6DhPJtW3ieKh0rAlSWKmzuS9E2N0Tmn1RHm+BDsagp4+s56r0QUiWFrIMoNLzY22Vju8CWuvzcerK03CjVBeU5QRuJAm3dvApQNaFPpYZC3rR0fNi36MC7mUn5SgvqR+12pbE81mEXW1oEzbmboXLwSlwij2SlJP9Pkf8fij9QhCl1U8Q7Y+aRfI2spZs91Pj9f/ORwTIGMkcL4HhTrSKKVKpMjWdFg0/WH43vLGTz2sOwkkb22NezrOI0lc5IoYQM4rkyNC/sxyNcLyRKzR9g66u09dsRJwRtuTI2U3hmZulaVOdvl5L5GBNIWW3lhC/+EC0fH0/gcjVU+z8P3QjyJbuLumh7+lQTL8G1F0GHiZA0dapTdp3JnxwH3Df6PEgNVQ+xqI5sSUgnQEpRzm2+TlFN+y8KphXCYlf9a/bqfCDcDb3HB7mtuoLEPC9s/jjsK1MWLsL/5xkp8aiS5abuIA09kzdNzlAxdk6nRohzONrwwrsF1wF0cpEtTRGBEGZpmvMvWW3RHocbqlPq+IYkdKW9jCQc6YQrpNegiLUlJnrf/I3Q4T+MFuK4XZ8igbXQjEboiA8eCjpzf/1PMPvr05X4YsFokRjfqv1TtrUiW9GIHgYIQOq2Bh60MYV3jdcKE7NqZ4lDv0d4M+Ee12eP+XLGmGBz95KhXZwkeGlj7iow65WzlxYxPJd2Ewm0wSk+w8yiERXVWf5V+rMFwkhmSzAagBJduidgSGZmP4vXCvIRBgosORhUoMba3snlnVH++GmTWoWRgqB1FGPP+NnorS+w4RWodk6xlxpcebifTTOvJf74PhubylmE6wiNjIE842bcIRFmRNJTclG03j3yUYKjiCue7C+YC8e/568sZAj1S4FSeqFW+y35uxw9J4cYvCRU6t1sbLxDc7Zv6upf9/S3SPTV4ch557lMoYdrrRJ6PGBGcr1wCm","layer_level":0},{"id":"7806c1c3-f109-4cb5-bb6e-c8be0755e8c5","repo_id":"af949642-5250-4212-ad94-2c3aa27a5ee8","name":"API Reference","description":"api-reference","prompt":"Create comprehensive API reference documentation for j8s. Document all public interfaces exported from index.ts including ServiceManager, BaseService, WorkerService, createWorkerService, and createServiceManagerAPI. For each class, document constructors, properties, methods, parameters, return types, and events. Include detailed descriptions of configuration options defined in interface.ts such as ServiceConfig, RestartPolicyConfig, and CronJobConfig. Provide usage examples for each API element drawn from actual codebase usage. Explain relationships between components, such as how WorkerService integrates with ServiceManager. Address deprecated features (if any) and provide migration guidance. Ensure complete coverage of all exported types and functions with precise technical details suitable for experienced developers.","parent_id":"","order":6,"progress_status":"completed","dependent_files":"index.ts,src/ServiceManager.ts,src/BaseService.ts,src/WorkerService.ts,src/interface.ts","keywords":"","workspace_path":"","gmt_create":"2025-09-19T11:14:17.445484+08:00","gmt_modified":"2025-09-19T11:19:18.821911+08:00","raw_data":"WikiEncrypted:C34GewOyK1SlumqKiPsSg+WPNa2UHH7yP2PPjE4/OPlAbu3AvGLNlwH2YbJEsK2ZFah4wHB5r1ikrL2gZxnF1Kx1fDC64V7dxuqlyxM9NLv3iAsiYlUhMHTEWCGKvQh5Ekys8YBtZzDgBi/d9ELXe4Pq+7MUxnAYMz2KxrU5PDM62+mPziIJudKGRqPBfUiIKsqqGVN6knA8nSMzwMMW5ZvZtbVCuP/h8y2YiwkmbEmtk+whsiIXnW8fVmwgwaJ9N+3mHdA9R2APw3CXXjIK7v7YYTQQsmlCuXyizLa3QWGHuonqmAFTQnSpN382x5ymh6Wv/+yfwmll0RwBRnTHXtYefi36aSQWnzb3Xt6XB5dnl/qqlxsWPXRm0d9cGmACBtbSaDhcMtRY7zWat5Mvyu9RRxzIqMTweEaq/tidWD95VKJ+C3pnqPexAkJ0+6UONIUs6jfPqb3TQZ50cLV1/bOUBKhCbpXsHOHMXbDBtxwbzdtmTk14SIotkuC3Ooyk1yxE42GBBq+UNo/VtFkKyxMGqhK9AE8A9JzinNtyQgAaprMCJtQrYoG6BRORXN1BPlhKk6Ncz4nmBq0kY9tgTN9ySIEH7OHTrIz5DzJxT/DlWqc1ImIeA+0PBicuiiCIILL5Nx6fEu1AX6kvLz47Vc+TdfBSVu0FXX7Ag3psxBiMzu7ez7GruqZpxj+gUcKMW43k1u/i4+VBL4Mva5sxDTm2eLIF+d2cmAPHf4OaWp2ydTSbmVmHh6gmErGXWK+/NHad3kgUh5UHudk1Q9eGLFKJdLCb3AlOBaN5Ob0S7s8GJ/G6TdGseWEfXqP3hgRIQlItr8Xf+aMV3e+oqfqFUALyEynVZtm7Dh7qo08cxx//PqaLxHVr2cpCyw5Z63Z/3V8qnxwIWBq2+vFIZHilnho46Vo/3ORYUEzr4RL3w2SYVmKcgQpS3ZqIemCGooMDLpx239x37PiBZb7ihzJfZXOnYgjeyJEgBNBK4P6K6BC0yeZNQjxKj8JIH9GaOLmiusLTUk0hF7fSVpqScNnENVzyG8g0RvC8DnIXTUQ66qcgP1fAb1tP0syVVmR4zynuXKkVTeXVpYpSUtD0H3XCZUknA8Femxd8omJNTdwX4tb/dRWkVSliZ2U7ddVnu9C0oCAy+Fj6Bv0VXeMnc3bijMy1TUelpXeDsYCOTKbxwHUY4LKrdDpwyNmUYYV+TIfLrgf3sLxhuJtMMyhSWYgOJM8aiyq1Av+QVg1iz/DTaAi+F5oSunCKenCzMILauuw4ydVpnZEVp4jBLqqf602DYxRg9LaXgQkADIwfmJm/rf2LCUh+FNo8Ak8fMOIgaCcnyD54yo9P3VPBM4kY31RD22n+s/iKpGd65p9lzrgwcEgvlzOayDpzdtlchprNSYiR1PjYUnSvWuRI3po/6GuJGE0+pck5Rp6pvk7RIsEYYAPCj4cEwmA5H3z75gqaHhnc2ynuzNb4Sm97VCkOHSxi5/coNfSylSG7D1DKt9nvLZ3HrY429S1BVs0iWkwmAEaYtv8lhB7ARGAGF/+yzcDW/g==","layer_level":0},{"id":"f5b3ccb0-e72b-4655-9334-b4e7cea6bf33","repo_id":"af949642-5250-4212-ad94-2c3aa27a5ee8","name":"Examples","description":"examples","prompt":"Create comprehensive content showcasing practical examples from the j8s codebase. Present annotated walkthroughs of key examples including demo.ts (basic service), rest-api.ts (REST integration), worker-with-data.ts (data passing to workers), and worker-failure.ts (failure handling). For each example, explain the purpose, configuration choices, and execution flow. Highlight important patterns like workerData usage, error simulation, and API endpoint registration. Show how multiple services can be orchestrated together. Include complete code snippets with line-by-line explanations of critical sections. Demonstrate how examples map to real-world scenarios like background processing, health monitoring, and fault-tolerant systems. Organize examples by complexity from basic to advanced use cases.","parent_id":"","order":7,"progress_status":"completed","dependent_files":"examples/,examples/demo.ts,examples/rest-api.ts,examples/worker-with-data.ts","keywords":"","workspace_path":"","gmt_create":"2025-09-19T11:14:17.446349+08:00","gmt_modified":"2025-09-19T11:20:06.716272+08:00","raw_data":"WikiEncrypted:VDiDZJYWRQTud/QhSweUbZecdnHTcSJd4uItQHBGTB+0TWQtM7qGwEOUbAvWZenOlpU4mRj5vFymPuiGZjhj9FOh8hopRYdhFBLJIaWMnuG1fDFDDTjavuaJXtW8Wai2nXPp5JuBWpo98Pm8+/IDWVz1LbsfSLX6+sGMyKmGksQ9z4CmAmP7FwPbGvozmrfGe2+L6GXsojrEiuazo0+49Z8R3n9lqvKJXkCs76EfLl/26uqgCri9JSiEeyKgG++/QVrSXZTtnv4LnYy1ZNr51QTNsKolAIO9OEbCsa5RHLokrofyvCiRi4cA8hNQ0HBVvG8V5oI1usiCGKFRLu79jUI7xLVpLCvYtHa1V0woYmSt0WxOdliWxNmAkBW3ieyvNa6eBDPsskBVGxR8E5/ePcPIcMU3tt60J6zlZ7oK44jq0FdxqcsGOuYOs0vJoyW8Ex+nPHMSn2qcMFt7MYNo98TutgVaa0KQon0arRRIr6gmyFTCqet9J7wy8lsqFBO/s6+oKW51/uzTeNEI2UlXxHyHoR1TwOcyOjlJPm9JDL8Th/EQ7/ylN52w2+P0H+lJ9wh99MDmwVRa5mqqTuHSNcpl5bFSR5M/u697HwOT8fjCfdVxAFplJDDEgoIdMVkQ13+2E3H7aknMvaS4x4aiHk+Jh77KQZy9tOrlUbpYcmz4kbEawfK7/qnfK8OKQfapS/wDuUv9q7PjTH7UEzheYTN3g/YjVEaUaW/G+g0HsTmnPDm5USj579t/0grz3FxD0RroHmpQifx2KlNpkRUPb0Owd79oKudn8+u28irKTA2TSe5EhvtSyxumfd4jaXF/yeRv51MlHSYi24y/UEaTtHKLX5vA8Bik7ssL/DSsKeULZcN17sGksddsLa/2YrS3gwTMcE7TSyGNRLbotS6tT31a8TMkQvKaBe+yGdwdy85JS8cogQqAQLxMtDkXocYLQbsLErHH/V2GMEM32cll2wQAyC6tyADq0vJoBwYuOkdxH6y9CROrMAWKIXeYhUCMFYeDpskvFfs15/wgqZUz/set9J6RuFIXF6qkX85JldiXFurGCtoKjaA6+t5CG81I4dwwDk9C1xVyQ2akJgd6yLjrFOzGW8dRsBgrIPFESVVF8G2O8NY5nXVLqeGK3p1iYs1iKxyesf9WoZ35unjnvY6+hythB2SnNtBg31HC4V5f9xwjqilZ5btlGhRBlVuRIek0p557P4V65GdGjTvk2BZSSpwvk6b0D3EOO4JRc53R1pR8m6j21VKBzpcLqNJcOzilCnEArmHRzXtnFT/FnWjLAjV9TuY6GR7rSYCQPSRx1/y1xP+tuwwEdQD9PEmv7T6xQ9VlVvph9XroILcM/S3QhuwSYt9wpASCRjEpJ9JZI+y3ngAZuyhLHgyVRDCG3vwHBwotUcrost5AtIWCYgDX3Crjt9YzX85c5nXeYCa+4fQWcIcx2bmNXEnVmE7o0d3EZdlnbwyUT6/LoKpI+3d7IZ5mkFqSU9HE9RlcNNFG1QZDgIBuDoQIfA4jxHwgFKHXg8WI7VD10uEdUC8utgRQa5fX/vWXZKnPEnYafH0=","layer_level":0},{"id":"5abd2810-eaf3-4a39-ba11-54cddd6755bc","repo_id":"af949642-5250-4212-ad94-2c3aa27a5ee8","name":"Best Practices","description":"best-practices","prompt":"Develop detailed content on best practices for using j8s effectively. Cover service design patterns such as state management, error isolation, and graceful shutdown. Provide guidance on choosing between BaseService and WorkerService based on workload characteristics. Recommend strategies for restart policy configuration to balance availability and resource protection. Offer performance considerations for worker thread utilization and memory management. Include testing approaches using Vitest (referencing vitest.config.ts) for service logic and lifecycle behavior. Address monitoring integration through health check endpoints. Provide recommendations for production deployment, logging (referencing logService.ts), and configuration management. Include anti-patterns to avoid, such as blocking the event loop in main-thread services.","parent_id":"","order":8,"progress_status":"completed","dependent_files":"src/ServiceManager.ts,examples/worker-restart-policy.ts,examples/restart-policy.ts","keywords":"","workspace_path":"","gmt_create":"2025-09-19T11:14:17.44695+08:00","gmt_modified":"2025-09-19T11:20:14.015997+08:00","raw_data":"WikiEncrypted:qR01IwWN4h+w0LFr9v0A+/aXDEkkIzwJCzQlNWtKG37ki0rfiZQoSdQrR/v942EqsaO79Lsmo4GDsQ3D+yXlVG+LHxX8HXKNxwYlt6jg+UbGrg+stmNULrt/1dJgo3NbeFHvreYwrpVDLB4RLNaPru+w/kgSuQGXq9PhxM7G04YUqpYlVfhOXm0DGrJKcbbpw1vTn/FDtVlX1hQ64HR0SbZUGv4jFT23D0jUl1CeNzWNmzoWXQtDntBXYlQXsyOS4WA8qVCUzyO886z4nABOojbtOkdCz+4zLepw7FWWCx3kYPGodaw+XMIUdJltAgOKKukDTo4hkHNgXF35qCDuTs0tOI1Gwszp11Z66EIBZoLP1s7t8ygmCyS8aEYCR2uea1BPAH+NWIaXU0vUlJuU8q+vM+qHLs9MGU8MVRYF/B26ExoiFJvQQecxmL0/elLNrIJm7N0ySCGdOZXcLp/Uud6PQa4MSJGnULeUxUfZRv20xbb1TddgnwpAEYIMU9JJoul5KuuB1MQAWUoss49AwR94hEce78MreCJaKVUB8u7lUc/MRjEyG3tABb6Yes6OfKwPf3ur7k+81e2IqnDzF3O5ClU+X1/WibK4TWjwXc82CLIATePvTWU7WO0MQx7I2gMYYPN0jymHl4YFA+BPmE8pH5k5n+6XEBFElO+XcwA4SbPeRnCCWzRb/cKHs3F/uzOr3I5+XeI3hr+JQmxm9EIAVLnD7BCyEEViEHoG9YvDFF61GIPXjAvi4sy9uyLBy1OvKcIwIS2hWI+7sQwWGwElEXVqgddJSPNB21sbFDeMG10uVLdc0NTM3KhX1hrdqy3x2Ltdesnrk1zfJnmAe2Qi/yWVIXAZq4iFXXZSIu+FzpQ0p+H1TNIaaLrGTmJ+DZK7u2PbkBXyRMd4x0XvrgyEqatc/GpW4UVHP8JxNN10efhLpH7lwtlGTtNm5yhDH1/N8++3QEh8eGBoOE2iL+BlhuBBXUjbBF1JOuEtD7fAwL8SDhHSVRl2mKIS51fCl9O+IO9koo9Z0Z7M+T+LcydO/kc0XOtbEZ2gEXUhQmj0m6ls2TYYY2NbfPhSj2CjvnVJ4hYfDD9Mr4+CeU9aXyzsAN7VCfBrmxyEk73M2CYMx9ZRJkFRtNyMr4v/r/d4ShT6pSg+uqi/k/hpjeEL0LTjk3bReKdSDkrnS9VX+UmL7EdPe5RLdisDUnWaorvPjyKPvP2OCNDA51jHofNNUPub0LhAAkLn75tlmnRTAh8fTeX4zku3Jg7VfPcAZcpbQJtJ59iH7kfBmXrSpPwcxBbtO1njvDO/ONcZlYkUcS3pXdVHd2Xcnv1zBI02sHKAc7im++GJ6hcapKI9G5Db1u5TJuEERNyF1JF2ot1ZjMrwHUb3hIsTbOu+mEwhVJ8pOgh5Ano8PgoxEIpDrNF8GJZeuFijnd3f1iIZM7FMryUWXqA2brAZH6PFZ1b6bg4Mq1zSqHmRiKx+ja+sL6GpgEZmJGWeJi/efwccye8rWaTg8G8T70NLPyPr7Ont4cGRpTZOH5c8amLkoKCFpUlL7Q==","layer_level":0},{"id":"8cf42a28-7881-4a8c-84ac-4e4383bfbdba","repo_id":"af949642-5250-4212-ad94-2c3aa27a5ee8","name":"Architecture","description":"architecture","prompt":"Create architectural documentation for the j8s framework. Describe the high-level design as a service orchestration layer with pluggable execution models. Document the key architectural patterns used: Abstract Factory (BaseService), Command Pattern (lifecycle methods), Observer Pattern (health monitoring), Strategy Pattern (restart policies), and Singleton-like ServiceManager. Explain component interactions, data flows, and integration points. Include system context diagrams showing main process, worker threads, and external API consumers. Address technical decisions like using @kunkun/kkrpc for worker communication and Hono for REST API. Discuss trade-offs between complexity and flexibility. Cover scalability considerations for managing hundreds of services and deployment topology options. Address cross-cutting concerns like error propagation, resource cleanup, and process lifetime management.","parent_id":"","order":9,"progress_status":"completed","dependent_files":"src/ServiceManager.ts,src/BaseService.ts,src/WorkerService.ts,src/interface.ts","keywords":"","workspace_path":"","gmt_create":"2025-09-19T11:14:17.447427+08:00","gmt_modified":"2025-09-19T11:21:55.411103+08:00","raw_data":"WikiEncrypted:EPw1VhZSv2AMLpYzHbCG5WhrBrPQhDzToMUWXKxAdV8GO/eloF3I4Slz9yuRjGETQik5KYGJbnRBvt/mooXBeNaDXwefJ93qZwaewr965HJy5lfmHgYaO1buki8iEUfJyW0PN+ipqWsyUMoDRr9+NVqPtjUN4U07adjwSNAJlB5zBKCM3PtZ6cjTRNYztxJBw20DN159ueirIGAtNDAO93mlW/YrPdSLwTTMqW4P+MjbMznO2K1UAwU1zzy46zoS/guGuIvUza0X++mjUuN72rJilOqfECvT45WN9HG7lgS3rthI8cNaAT3ggYHKqeoLexdTV80TLrtmvJFAP9kS2gAsqCilPQdLn7uIP8DwMtYdvTMfrxMEtF9N5+2YFY3DwtZQfDhZCNdB7eWPBVE2+STLOh3lPOrg98toOFRXp9O+slza4vBBp2LO7PlAGtj/z1UC+t6WL1K8c4P2qAkdfvqPykZNWsRoE2XDqcZXsSO+EPQhpqfXl9EE2bvN+y2OWwJ8SKQyxuovCHH+Qum6mjP3rUj1vennvwqAWHz0QBZHxnJNWkxKSX2pLsqDBbyvToUoIwP0sl91l4bvx7y7VMT6bodQY9hS9C7ZRkQTNW63RhIRqcjb5kJglkzJxHn69UsHPWzaYusn/lHFKhBX7kJ8Yr/79UuoTJQW6lMVZOY4q4vFEI7W+ZVmLJ17/6ViZKkuE3w9FYTSImLS1jATWBvlgv9Xf2E4L6zUnbZWWLYoaeCzMe2VzbpomAjnNLg3ftMcDWN0X8Ve9vGJCMjSgpeGqFF40yNmuRsVMLgf/fUrrFCbJzqqFBpwX9hlTQw+R5zVsCZKv80v9IJSn9NLsTeOw8hQJvoNrqw8eLh5pxfqlzloZLk0Om94djeV01GXXQadn/Ti4F/evu2s0BsQqTYp+6Ijfb43L0XU5pFmcGkpM5apjRWfAmV2p9+i9wMdxBo1lp6Fn/IKcPasmNofZaBZjE+XFM7QnWuZ3U0doP6Of/c8Njzh6WMmtFBn+NI79bzyU5+TLR+9zm/t+TmwgtAJX9U3lZqyjUVCqYHkJWNvUuWgRN65fJVM0F8vLpdqA0/fRWAAoAb0D7RnW9690zG7MjsqFmMjORxHqk57YRGG/Pflg0/ib3zGN7L3R+cF02MtTnNnZA5bfroO4Q+LN2SRey5luYl8/tGpsxAz73EC1iTy5Wdyo1fGY8gRtqbvKNEiSQzn/mWT+IcW+oSWpXgCVSirL95TXCfK27R94bZaS7z3Bv3SPc5YwC19mscx90fZgvgt+c1GMuS9ZzZq0CAilFMUkGvf5mnRx+mxpena+RwhfHBLxsDxoEOFN9ED1tEQzmYoOXpb6lUTGcL1Ba6KA1de2w3oOW1nVm1Vh5lpgNgQkC99VkY1vV2LWo0gHuGbGntOG7o3IlyARRJWyxIpWCru4k/cLy2Ylq/CUrBlxS5vNJpSAy11OYXSrkarY7ejkigCxurJz/dCoNnOFVkUdg0oogduaJh3MzNwCFqJaGbqq3Otf1L4ll1Up7Bp4YAiRs/C7EVP00hgP9wVW/o7PXx8WJiaEKuB8xnY1u/CpXa4kU3+Btnghm9/ZTxrI2JQXv1SCZq6TKV8B92cyA==","layer_level":0}],"wiki_items":[{"catalog_id":"cc6a8ff3-52ae-4aff-8dcf-da0120e2b071","content":"","title":"Getting Started","description":"getting-started","extend":"{}","progress_status":"completed","repo_id":"af949642-5250-4212-ad94-2c3aa27a5ee8","workspace_path":"","id":"f64a0a96-5e65-4adc-8c7d-1331bb590291","gmt_create":"2025-09-19T11:16:16.646483+08:00","gmt_modified":"2025-09-19T11:16:16.651066+08:00"},{"catalog_id":"9ff9e5ec-5dca-4298-8e0d-873caa7446da","content":"","title":"Introduction","description":"introduction","extend":"{}","progress_status":"completed","repo_id":"af949642-5250-4212-ad94-2c3aa27a5ee8","workspace_path":"","id":"15f8f9bd-8efb-47a3-86d9-139b02168abf","gmt_create":"2025-09-19T11:16:17.970282+08:00","gmt_modified":"2025-09-19T11:16:17.974588+08:00"},{"catalog_id":"c2dcfe3e-6ae9-4e3c-b709-8d6995c66d40","content":"","title":"Core Concepts","description":"core-concepts","extend":"{}","progress_status":"completed","repo_id":"af949642-5250-4212-ad94-2c3aa27a5ee8","workspace_path":"","id":"a1b4df9d-1afe-40b1-a45e-e2a52b4e9a8b","gmt_create":"2025-09-19T11:17:19.359973+08:00","gmt_modified":"2025-09-19T11:17:19.363305+08:00"},{"catalog_id":"e5a37c25-eba7-4adb-899b-d4a2d39d1f70","content":"","title":"Service Implementation","description":"service-implementation","extend":"{}","progress_status":"completed","repo_id":"af949642-5250-4212-ad94-2c3aa27a5ee8","workspace_path":"","id":"38157285-c9d1-4aa6-b825-dc7da992839b","gmt_create":"2025-09-19T11:17:21.765903+08:00","gmt_modified":"2025-09-19T11:17:21.768977+08:00"},{"catalog_id":"a8ecf157-826c-4ab0-92f9-9b27421b7df0","content":"","title":"Advanced Features","description":"advanced-features","extend":"{}","progress_status":"completed","repo_id":"af949642-5250-4212-ad94-2c3aa27a5ee8","workspace_path":"","id":"fe5ed23c-7c77-4200-8f35-da7affefa6ff","gmt_create":"2025-09-19T11:18:17.488141+08:00","gmt_modified":"2025-09-19T11:18:17.491598+08:00"},{"catalog_id":"3a8d1efa-4770-4054-8eed-b30fd336701d","content":"","title":"REST API","description":"rest-api","extend":"{}","progress_status":"completed","repo_id":"af949642-5250-4212-ad94-2c3aa27a5ee8","workspace_path":"","id":"822c75f0-edd0-42e9-a3e1-692e41f8ee8e","gmt_create":"2025-09-19T11:18:55.225902+08:00","gmt_modified":"2025-09-19T11:18:55.229982+08:00"},{"catalog_id":"7806c1c3-f109-4cb5-bb6e-c8be0755e8c5","content":"","title":"API Reference","description":"api-reference","extend":"{}","progress_status":"completed","repo_id":"af949642-5250-4212-ad94-2c3aa27a5ee8","workspace_path":"","id":"dbaa7fde-2261-45b6-b271-a89ec0db59d2","gmt_create":"2025-09-19T11:19:18.818223+08:00","gmt_modified":"2025-09-19T11:19:18.822424+08:00"},{"catalog_id":"f5b3ccb0-e72b-4655-9334-b4e7cea6bf33","content":"","title":"Examples","description":"examples","extend":"{}","progress_status":"completed","repo_id":"af949642-5250-4212-ad94-2c3aa27a5ee8","workspace_path":"","id":"f2de927b-279b-4d58-bc5f-28a24f192806","gmt_create":"2025-09-19T11:20:06.711787+08:00","gmt_modified":"2025-09-19T11:20:06.716498+08:00"},{"catalog_id":"5abd2810-eaf3-4a39-ba11-54cddd6755bc","content":"","title":"Best Practices","description":"best-practices","extend":"{}","progress_status":"completed","repo_id":"af949642-5250-4212-ad94-2c3aa27a5ee8","workspace_path":"","id":"01eef66a-324d-4f3e-8c87-37e5d23c9248","gmt_create":"2025-09-19T11:20:14.011896+08:00","gmt_modified":"2025-09-19T11:20:14.016328+08:00"},{"catalog_id":"9eb02715-f9ad-4fb8-a684-4997cccbdbd0","content":"","title":"BaseService Implementation","description":"base-service-implementation","extend":"{}","progress_status":"completed","repo_id":"af949642-5250-4212-ad94-2c3aa27a5ee8","workspace_path":"","id":"1123a2a1-b26c-4071-88a4-931a6404b349","gmt_create":"2025-09-19T11:21:23.933263+08:00","gmt_modified":"2025-09-19T11:21:23.937245+08:00"},{"catalog_id":"8cf42a28-7881-4a8c-84ac-4e4383bfbdba","content":"","title":"Architecture","description":"architecture","extend":"{}","progress_status":"completed","repo_id":"af949642-5250-4212-ad94-2c3aa27a5ee8","workspace_path":"","id":"e79392fc-6ed0-49aa-aedb-10e58857d62a","gmt_create":"2025-09-19T11:21:55.408763+08:00","gmt_modified":"2025-09-19T11:21:55.41128+08:00"},{"catalog_id":"5e5342f6-04a8-4925-a7a1-b6508240e4f3","content":"","title":"Lifecycle Management","description":"lifecycle-management","extend":"{}","progress_status":"completed","repo_id":"af949642-5250-4212-ad94-2c3aa27a5ee8","workspace_path":"","id":"2eeb7e0f-7a9c-4ae9-b3ad-fcb7b0bc3af4","gmt_create":"2025-09-19T11:22:18.316343+08:00","gmt_modified":"2025-09-19T11:22:18.319269+08:00"},{"catalog_id":"ed6e7ad2-7927-4268-ae85-2a23a0cc17ef","content":"","title":"Restart Policies","description":"restart-policies","extend":"{}","progress_status":"completed","repo_id":"af949642-5250-4212-ad94-2c3aa27a5ee8","workspace_path":"","id":"944ed82a-a2d0-4717-8464-7decac8bf591","gmt_create":"2025-09-19T11:23:04.375994+08:00","gmt_modified":"2025-09-19T11:23:04.380088+08:00"},{"catalog_id":"23796b6e-de24-4d29-a9e8-1c552ca0852e","content":"","title":"Basic Services","description":"examples-basic-services","extend":"{}","progress_status":"completed","repo_id":"af949642-5250-4212-ad94-2c3aa27a5ee8","workspace_path":"","id":"a9e3c89d-baff-410d-9e7b-1487b99eb598","gmt_create":"2025-09-19T11:23:40.962732+08:00","gmt_modified":"2025-09-19T11:23:40.965837+08:00"},{"catalog_id":"a0310181-06fe-4b58-894b-eb39d6ae368e","content":"","title":"WorkerService Implementation","description":"worker-service-implementation","extend":"{}","progress_status":"completed","repo_id":"af949642-5250-4212-ad94-2c3aa27a5ee8","workspace_path":"","id":"2162f5c8-8f2c-4dd9-b6ac-cd8be7d3ad16","gmt_create":"2025-09-19T11:24:32.761006+08:00","gmt_modified":"2025-09-19T11:24:32.765281+08:00"},{"catalog_id":"7431b25e-5228-4645-8dd0-ac3a9b31d85c","content":"","title":"Execution Models","description":"execution-models","extend":"{}","progress_status":"completed","repo_id":"af949642-5250-4212-ad94-2c3aa27a5ee8","workspace_path":"","id":"e29a8973-59a0-4e9a-aa05-2c2e813dce45","gmt_create":"2025-09-19T11:24:38.49785+08:00","gmt_modified":"2025-09-19T11:24:38.502604+08:00"},{"catalog_id":"0e38459a-d586-40d9-a37e-03317a1f489e","content":"","title":"Cron Scheduling","description":"cron-scheduling","extend":"{}","progress_status":"completed","repo_id":"af949642-5250-4212-ad94-2c3aa27a5ee8","workspace_path":"","id":"97410b77-1fea-46eb-8f54-50fcc255bc58","gmt_create":"2025-09-19T11:25:37.488054+08:00","gmt_modified":"2025-09-19T11:25:37.492658+08:00"},{"catalog_id":"5f94a244-0937-4c2c-acf5-b942a2e61824","content":"","title":"Worker Integration","description":"examples-worker-integration","extend":"{}","progress_status":"completed","repo_id":"af949642-5250-4212-ad94-2c3aa27a5ee8","workspace_path":"","id":"4759264c-0e63-4c25-80fd-6acf4e103947","gmt_create":"2025-09-19T11:25:43.221166+08:00","gmt_modified":"2025-09-19T11:25:43.225422+08:00"},{"catalog_id":"5c3461f6-fd7f-4a18-b615-2d9ed3519f1a","content":"","title":"RPC Exposure in Workers","description":"rpc-exposure-mechanism","extend":"{}","progress_status":"completed","repo_id":"af949642-5250-4212-ad94-2c3aa27a5ee8","workspace_path":"","id":"b3a2f323-3da1-4a14-839d-f1148207d046","gmt_create":"2025-09-19T11:26:37.010102+08:00","gmt_modified":"2025-09-19T11:26:37.014276+08:00"},{"catalog_id":"142844b4-a900-4944-ae66-465a23b06d4c","content":"","title":"Status \u0026 Health","description":"status-health","extend":"{}","progress_status":"completed","repo_id":"af949642-5250-4212-ad94-2c3aa27a5ee8","workspace_path":"","id":"1cee3b20-df86-4d87-bad4-18212633f654","gmt_create":"2025-09-19T11:26:50.210033+08:00","gmt_modified":"2025-09-19T11:26:50.212101+08:00"},{"catalog_id":"c8523dae-bc64-42d2-ae7f-da6c7a476d84","content":"","title":"Auto-Termination Settings","description":"auto-termination","extend":"{}","progress_status":"completed","repo_id":"af949642-5250-4212-ad94-2c3aa27a5ee8","workspace_path":"","id":"8305ccce-22a1-497a-8e67-8e95e9a999a0","gmt_create":"2025-09-19T11:27:32.855419+08:00","gmt_modified":"2025-09-19T11:27:32.859088+08:00"},{"catalog_id":"1ddb7734-d4bf-4172-b56c-31874dd3c088","content":"","title":"Failure Handling","description":"examples-failure-handling","extend":"{}","progress_status":"completed","repo_id":"af949642-5250-4212-ad94-2c3aa27a5ee8","workspace_path":"","id":"9208c8c9-f77f-41df-a1ec-9d189855da65","gmt_create":"2025-09-19T11:28:11.616047+08:00","gmt_modified":"2025-09-19T11:28:11.619846+08:00"},{"catalog_id":"fcc4bdec-36c4-42f9-9db0-217801d3edb8","content":"","title":"API Integration","description":"examples-api-integration","extend":"{}","progress_status":"completed","repo_id":"af949642-5250-4212-ad94-2c3aa27a5ee8","workspace_path":"","id":"b857e01d-2f4f-452b-9018-f8913875e164","gmt_create":"2025-09-19T11:28:54.864762+08:00","gmt_modified":"2025-09-19T11:28:54.868734+08:00"},{"catalog_id":"ce12bc15-f748-43b7-b897-55e61d07cc32","content":"","title":"Main Thread Execution with BaseService","description":"main-thread-execution","extend":"{}","progress_status":"completed","repo_id":"af949642-5250-4212-ad94-2c3aa27a5ee8","workspace_path":"","id":"37013874-62cc-4c9d-a1ec-f29a7d0a86bd","gmt_create":"2025-09-19T11:29:27.298876+08:00","gmt_modified":"2025-09-19T11:29:27.30336+08:00"},{"catalog_id":"5528d3da-081d-428f-9c22-017c3881355e","content":"","title":"Worker Thread Execution with WorkerService","description":"worker-thread-execution","extend":"{}","progress_status":"completed","repo_id":"af949642-5250-4212-ad94-2c3aa27a5ee8","workspace_path":"","id":"50b0e08f-deb1-4244-8a32-4ef95e0d2eca","gmt_create":"2025-09-19T11:30:11.657208+08:00","gmt_modified":"2025-09-19T11:30:11.661217+08:00"},{"catalog_id":"42aa2418-3cdf-4ce9-bf7f-03ee1964dafc","content":"","title":"RPC Communication and Service Exposure","description":"rpc-communication","extend":"{}","progress_status":"completed","repo_id":"af949642-5250-4212-ad94-2c3aa27a5ee8","workspace_path":"","id":"179ffdf2-84c4-4e3e-bc4a-907861867c08","gmt_create":"2025-09-19T11:30:25.449452+08:00","gmt_modified":"2025-09-19T11:30:25.453135+08:00"}],"wiki_overview":{"content":"\u003cblog\u003e\n# Comprehensive Project Analysis: j8s - JavaScript Service Orchestrator\n\n## 1. Project Introduction\n\n**Purpose Statement**:  \nj8s is a lightweight service orchestration framework for JavaScript/TypeScript applications that enables running multiple services within a single process using worker threads. It provides a structured approach to managing service lifecycle, restart policies, and cron-based execution.\n\n**Core Goals and Objectives**:  \n- Simplify service management in Node.js applications\n- Enable concurrent execution of services using worker threads\n- Provide automatic restart capabilities based on configurable policies\n- Support cron-scheduled services for periodic tasks\n- Offer health checking and monitoring capabilities\n\n**Target Audience**:  \n- Node.js developers building service-oriented architectures\n- Teams needing to orchestrate multiple background processes\n- Developers requiring reliable service restart mechanisms\n- Applications that need scheduled tasks with monitoring\n\n## 2. Technical Architecture\n\n### Component Breakdown\n\nThe project follows a modular architecture with clear separation of concerns:\n\n- **BaseService**: Abstract base class for all services\n- **ServiceManager**: Central coordinator for service lifecycle management\n- **WorkerService**: Implementation for running services in worker threads\n- **expose**: Utility for exposing services in worker contexts\n- **ServiceManager**: Core orchestration engine\n\n### Design Patterns\n\nThe system implements several key design patterns:\n\n- **Abstract Factory**: BaseService provides a template for service implementations\n- **Command Pattern**: Service lifecycle methods (start/stop) as executable commands\n- **Observer Pattern**: Health checking and status monitoring\n- **Strategy Pattern**: Configurable restart policies\n- **Singleton Pattern**: ServiceManager acts as a central registry\n\n### System Relationships\n\n```mermaid\nflowchart TD\n  A[Client Application] --\u003e B[ServiceManager]\n  B --\u003e C[BaseService]\n  B --\u003e D[WorkerService]\n  C --\u003e E[Custom Services]\n  D --\u003e F[Worker Threads]\n  F --\u003e G[expose Function]\n  G --\u003e H[Service Implementation]\n  B --\u003e I[Cron Scheduler]\n  I --\u003e C\n  I --\u003e D\n```\n\n### Data Flow\n\n```mermaid\nflowchart LR\n  A[Service Configuration] --\u003e B[ServiceManager]\n  B --\u003e C{Service Type}\n  C --\u003e|Main Thread| D[BaseService]\n  C --\u003e|Worker Thread| E[WorkerService]\n  D --\u003e F[Service Execution]\n  E --\u003e G[Worker Thread]\n  G --\u003e H[expose]\n  H --\u003e I[Service Implementation]\n  F --\u003e J[Status Updates]\n  G --\u003e J\n  J --\u003e K[Health Check Results]\n  K --\u003e L[Client]\n```\n\n## 3. Key Implementation\n\n### Main Entry Points\n- `index.ts`: Primary entry point and public API surface\n- `src/ServiceManager.ts`: Core orchestration logic\n- `src/BaseService.ts`: Base service implementation\n\n### Core Modules\n- **ServiceManager**: Central orchestration component\n- **BaseService**: Foundation for service implementations\n- **WorkerService**: Worker thread integration\n- **expose**: RPC interface for worker services\n\n### Configuration Approach\n- Service configuration via `ServiceConfig` interface\n- Restart policies and cron scheduling\n- Worker options and auto-termination settings\n- Type-safe configuration with TypeScript interfaces\n\n### External Dependencies\n- **hono**: Web framework and JSX support\n- **cron**: Cron job scheduling\n- **effect**: Functional programming utilities\n- **@kunkun/kkrpc**: RPC communication for workers\n- **valibot**: Data validation\n- **react**: UI component support\n\n### Integration Points\n- Worker thread communication via RPC\n- Cron scheduling integration\n- Health check endpoints\n- Service lifecycle hooks\n\n### Component Relationships\n\n```mermaid\ngraph TD\n  A[ServiceManager] --\u003e B[BaseService]\n  A --\u003e C[WorkerService]\n  C --\u003e D[Worker Thread]\n  D --\u003e E[expose]\n  E --\u003e F[Service Implementation]\n  A --\u003e G[CronJob]\n  G --\u003e B\n  G --\u003e C\n  B --\u003e H[IService Interface]\n  C --\u003e H\n  A --\u003e I[Health Check System]\n  I --\u003e B\n  I --\u003e C\n```\n\n## 4. Key Features\n\n### Functionality Overview\n- **Service Orchestration**: Manage multiple services through a unified interface\n- **Worker Integration**: Run services in separate worker threads\n- **Restart Policies**: Automatic service recovery with configurable strategies\n- **Cron Scheduling**: Execute services on scheduled intervals\n- **Health Monitoring**: Comprehensive service health checking\n- **Type Safety**: Full TypeScript support with interfaces and types\n\n### Implementation Highlights\n- **Unified Service Interface**: Consistent API across service types\n- **Automatic Restart**: Exponential backoff restart strategy\n- **Cron Integration**: Scheduled execution with timeout protection\n- **Status Management**: Centralized service state tracking\n- **Error Handling**: Robust error recovery and logging\n\n### Feature Architecture\n\n```mermaid\nstateDiagram-v2\n  [*] --\u003e Stopped\n  Stopped --\u003e Starting: startService()\n  Starting --\u003e Running: start() successful\n  Starting --\u003e Crashed: start() failed\n  Running --\u003e Stopping: stopService()\n  Stopping --\u003e Stopped: stop() completed\n  Stopping --\u003e Crashed: stop() failed\n  Crashed --\u003e Restarting: restartPolicy != \"no\"\n  Restarting --\u003e Starting: restart timeout\n  Running --\u003e Completing: service completes\n  Completing --\u003e Stopped: completion\n  Crashed --\u003e Stopped: maxRetries exceeded\n```\n\n### Service Lifecycle Management\n\n```mermaid\nsequenceDiagram\n  Participant Client\n  Participant ServiceManager\n  Participant Service\n  \n  Client-\u003e\u003eServiceManager: addService(service, config)\n  Client-\u003e\u003eServiceManager: startService(name)\n  ServiceManager-\u003e\u003eService: start()\n  alt Success\n    Service--\u003e\u003eServiceManager: Promise resolves\n    ServiceManager-\u003e\u003eServiceManager: status = \"running\"\n  else Failure\n    Service--\u003e\u003eServiceManager: Promise rejects\n    ServiceManager-\u003e\u003eServiceManager: status = \"crashed\"\n    ServiceManager-\u003e\u003eServiceManager: schedule restart (if policy allows)\n  end\n  \n  Client-\u003e\u003eServiceManager: stopService(name)\n  ServiceManager-\u003e\u003eService: stop()\n  Service--\u003e\u003eServiceManager: completion\n  ServiceManager-\u003e\u003eServiceManager: status = \"stopped\"\n```\n\n### Restart Policy Implementation\n\n```mermaid\ngraph TD\n  A[Service Failure] --\u003e B{Restart Policy}\n  B --\u003e|no| C[No Action]\n  B --\u003e|always| D[Schedule Restart]\n  B --\u003e|on-failure| E{Within Retry Limit?}\n  E --\u003e|Yes| D\n  E --\u003e|No| F[Stop Attempts]\n  D --\u003e G[Exponential Backoff]\n  G --\u003e H[Restart Service]\n  H --\u003e A\n```\n\nSources:\n- [index.ts](/Users/hk/Dev/j8s/index.ts)\n- [package.json](/Users/hk/Dev/j8s/package.json)\n- [src/ServiceManager.ts](/Users/hk/Dev/j8s/src/ServiceManager.ts)\n- [src/BaseService.ts](/Users/hk/Dev/j8s/src/BaseService.ts)\n- [tsconfig.json](/Users/hk/Dev/j8s/tsconfig.json)\n\u003c/blog\u003e","gmt_create":"2025-09-19T11:12:45.10007+08:00","gmt_modified":"2025-09-19T11:12:45.10007+08:00","id":"259b672b-0c17-4a38-a4e6-183627f024cd","repo_id":"af949642-5250-4212-ad94-2c3aa27a5ee8","workspace_path":""},"wiki_readme":{"content":"No readme file","gmt_create":"2025-09-19T11:12:08.961761+08:00","gmt_modified":"2025-09-19T11:12:08.961761+08:00","id":"72c107af-1baf-4138-ad3f-00664c27e09d","repo_id":"af949642-5250-4212-ad94-2c3aa27a5ee8","workspace_path":""},"wiki_repo":{"id":"af949642-5250-4212-ad94-2c3aa27a5ee8","workspace_path":"","name":"j8s","progress_status":"completed","wiki_present_status":"COMPLETED","optimized_catalog":"\".\\n├── examples\\n│   ├── services\\n│   │   ├── logService.ts\\n│   │   ├── simpleWorker.ts\\n│   │   ├── worker-failure.ts\\n│   │   └── worker-with-data.ts\\n│   ├── demo.ts\\n│   ├── rest-api.ts\\n│   ├── restart-policy.ts\\n│   ├── restart.ts\\n│   ├── worker-restart-policy.ts\\n│   └── worker-with-data.ts\\n├── src\\n│   ├── BaseService.ts\\n│   ├── ServiceManager.ts\\n│   ├── WorkerService.ts\\n│   ├── api.ts\\n│   ├── expose.ts\\n│   ├── interface.ts\\n│   └── ui.tsx\\n├── .npmrc\\n├── AGENTS.md\\n├── CHANGELOG.md\\n├── README.md\\n├── api.ts\\n├── index.ts\\n├── jsr.json\\n├── package.json\\n├── tsconfig.json\\n└── vitest.config.ts\\n\"","current_document_structure":"WikiEncrypted:","catalogue_think_content":"WikiEncrypted:","recovery_checkpoint":"wiki_generation_completed","last_commit_id":"dfa2c9a8560b9f1ae7b9d040d413fa0f877772ae","last_commit_update":"2025-09-19T01:30:42+08:00","gmt_create":"2025-09-19T11:12:02.331299+08:00","gmt_modified":"2025-09-19T11:30:25.573777+08:00","extend_info":"{\"language\":\"en\",\"active\":true,\"branch\":\"main\",\"shareStatus\":\"\",\"server_error_code\":\"\",\"cosy_version\":\"\"}"}}